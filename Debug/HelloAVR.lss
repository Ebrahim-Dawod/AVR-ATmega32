
HelloAVR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000438  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000004ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800060  00800060  000004ac  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004ac  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000004dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000110  00000000  00000000  00000518  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000102a  00000000  00000000  00000628  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008ab  00000000  00000000  00001652  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007dd  00000000  00000000  00001efd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c4  00000000  00000000  000026dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000047d  00000000  00000000  000028a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c02  00000000  00000000  00002d1d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  0000391f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a3 36       	cpi	r26, 0x63	; 99
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <main>
  74:	0c 94 1a 02 	jmp	0x434	; 0x434 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <Application_init>:




void Application_init()			 //  to initiate the Used Peripherals &  Services --> Includes your code that runs once
{
  7c:	cf 93       	push	r28
	
	

	for(uint8_t pinNumber=0; pinNumber<8;pinNumber++)
  7e:	c0 e0       	ldi	r28, 0x00	; 0
	{
		LED_init(pinNumber,PORT_D, ACTIVE_HIGH);
  80:	41 e0       	ldi	r20, 0x01	; 1
  82:	64 e4       	ldi	r22, 0x44	; 68
  84:	8c 2f       	mov	r24, r28
  86:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LED_init>
void Application_init()			 //  to initiate the Used Peripherals &  Services --> Includes your code that runs once
{
	
	

	for(uint8_t pinNumber=0; pinNumber<8;pinNumber++)
  8a:	cf 5f       	subi	r28, 0xFF	; 255
  8c:	c8 30       	cpi	r28, 0x08	; 8
  8e:	c1 f7       	brne	.-16     	; 0x80 <Application_init+0x4>
		LED_init(pinNumber,PORT_D, ACTIVE_HIGH);
	}
	
	
	
	LED_init(1,PORT_B, ACTIVE_HIGH);
  90:	41 e0       	ldi	r20, 0x01	; 1
  92:	62 e4       	ldi	r22, 0x42	; 66
  94:	81 e0       	ldi	r24, 0x01	; 1
  96:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LED_init>
	
	LED_init(5,PORT_B, ACTIVE_HIGH);
  9a:	41 e0       	ldi	r20, 0x01	; 1
  9c:	62 e4       	ldi	r22, 0x42	; 66
  9e:	85 e0       	ldi	r24, 0x05	; 5
  a0:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LED_init>

	for(uint8_t pinNumber=0;pinNumber<8;pinNumber++)
  a4:	c0 e0       	ldi	r28, 0x00	; 0
	{
		Button_init(pinNumber,PORT_A,INTERNAL_PULL_UP_INPUT);
  a6:	42 e0       	ldi	r20, 0x02	; 2
  a8:	61 e4       	ldi	r22, 0x41	; 65
  aa:	8c 2f       	mov	r24, r28
  ac:	0e 94 75 00 	call	0xea	; 0xea <Button_init>
	
	LED_init(1,PORT_B, ACTIVE_HIGH);
	
	LED_init(5,PORT_B, ACTIVE_HIGH);

	for(uint8_t pinNumber=0;pinNumber<8;pinNumber++)
  b0:	cf 5f       	subi	r28, 0xFF	; 255
  b2:	c8 30       	cpi	r28, 0x08	; 8
  b4:	c1 f7       	brne	.-16     	; 0xa6 <Application_init+0x2a>
	{
		Button_init(pinNumber,PORT_A,INTERNAL_PULL_UP_INPUT);
	}

	
}// End of Application_init()
  b6:	cf 91       	pop	r28
  b8:	08 95       	ret

000000ba <Application_run>:


    /* Replace with your application code */
    while (1) 
    {
		for(uint8_t pinNumber=0; pinNumber<8; pinNumber++)
  ba:	c0 e0       	ldi	r28, 0x00	; 0
		{
			Button_read(pinNumber,PORT_A,&ButtonState); 
  bc:	40 e6       	ldi	r20, 0x60	; 96
  be:	50 e0       	ldi	r21, 0x00	; 0
  c0:	61 e4       	ldi	r22, 0x41	; 65
  c2:	8c 2f       	mov	r24, r28
  c4:	0e 94 84 00 	call	0x108	; 0x108 <Button_read>
			
			if(ButtonState==PRESSED)
  c8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  cc:	81 30       	cpi	r24, 0x01	; 1
  ce:	29 f4       	brne	.+10     	; 0xda <Application_run+0x20>
			{			
				LED_on(pinNumber,PORT_D);
  d0:	64 e4       	ldi	r22, 0x44	; 68
  d2:	8c 2f       	mov	r24, r28
  d4:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <LED_on>
  d8:	04 c0       	rjmp	.+8      	; 0xe2 <Application_run+0x28>
			}
			else  // ButtonState==NOT_PRESSED
			{
				LED_off(pinNumber,PORT_D);
  da:	64 e4       	ldi	r22, 0x44	; 68
  dc:	8c 2f       	mov	r24, r28
  de:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <LED_off>


    /* Replace with your application code */
    while (1) 
    {
		for(uint8_t pinNumber=0; pinNumber<8; pinNumber++)
  e2:	cf 5f       	subi	r28, 0xFF	; 255
  e4:	c8 30       	cpi	r28, 0x08	; 8
  e6:	51 f7       	brne	.-44     	; 0xbc <Application_run+0x2>
  e8:	e8 cf       	rjmp	.-48     	; 0xba <Application_run>

000000ea <Button_init>:

static uint8_t Input_Pin_Mode_G;


void Button_init(uint8_t pinNumber,uint8_t portNumber,uint8_t InputPinMode)  // Direction = INPUT
{
  ea:	cf 93       	push	r28
  ec:	c4 2f       	mov	r28, r20
	
	switch (InputPinMode)
  ee:	42 30       	cpi	r20, 0x02	; 2
  f0:	21 f4       	brne	.+8      	; 0xfa <Button_init+0x10>
	 {
	 
		case INTERNAL_PULL_UP_INPUT:
		
			DIO_init(pinNumber,portNumber,INTERNAL_PULL_UP_INPUT);
  f2:	42 e0       	ldi	r20, 0x02	; 2
  f4:	0e 94 29 01 	call	0x252	; 0x252 <DIO_init>
			break;
  f8:	03 c0       	rjmp	.+6      	; 0x100 <Button_init+0x16>
			  	 
		default: // cases included : EXTERNAL_PULL_UP_INPUT , EXTERNAL_PULL_DOWN_INPUT , NO_PULL_BUTTON_TO_GROUND_INPUT , NO_PULL_BUTTON_TO_VCC_INPUT
			
			DIO_init(pinNumber,portNumber,IN); 
  fa:	40 e0       	ldi	r20, 0x00	; 0
  fc:	0e 94 29 01 	call	0x252	; 0x252 <DIO_init>
			break;
			
	 }	//End of switch
			
Input_Pin_Mode_G = InputPinMode; // transmit Value of InputPinMode to outside of this function	
 100:	c0 93 61 00 	sts	0x0061, r28	; 0x800061 <Input_Pin_Mode_G>
					
}// End of Function  Button_init()
 104:	cf 91       	pop	r28
 106:	08 95       	ret

00000108 <Button_read>:




void Button_read(uint8_t pinNumber,uint8_t portNumber,uint8_t *ButtonState)		// get Button state (whether Pressed or Not Pressed) (will be gotten using ButtonState pointer value)
{
 108:	0f 93       	push	r16
 10a:	1f 93       	push	r17
 10c:	cf 93       	push	r28
 10e:	df 93       	push	r29
 110:	1f 92       	push	r1
 112:	cd b7       	in	r28, 0x3d	; 61
 114:	de b7       	in	r29, 0x3e	; 62
 116:	8a 01       	movw	r16, r20
	
	 uint8_t input_value;
	 //uint8_t* InputPinMode =&direction ; //Initialize Value of pinMode

	 DIO_read(pinNumber, portNumber, &input_value); // read dio
 118:	ae 01       	movw	r20, r28
 11a:	4f 5f       	subi	r20, 0xFF	; 255
 11c:	5f 4f       	sbci	r21, 0xFF	; 255
 11e:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <DIO_read>
	 
	 switch (Input_Pin_Mode_G)
 122:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <Input_Pin_Mode_G>
 126:	84 30       	cpi	r24, 0x04	; 4
 128:	19 f1       	breq	.+70     	; 0x170 <Button_read+0x68>
 12a:	28 f4       	brcc	.+10     	; 0x136 <Button_read+0x2e>
 12c:	82 30       	cpi	r24, 0x02	; 2
 12e:	41 f0       	breq	.+16     	; 0x140 <Button_read+0x38>
 130:	83 30       	cpi	r24, 0x03	; 3
 132:	91 f0       	breq	.+36     	; 0x158 <Button_read+0x50>
 134:	3a c0       	rjmp	.+116    	; 0x1aa <Button_read+0xa2>
 136:	85 30       	cpi	r24, 0x05	; 5
 138:	81 f1       	breq	.+96     	; 0x19a <Button_read+0x92>
 13a:	86 30       	cpi	r24, 0x06	; 6
 13c:	21 f1       	breq	.+72     	; 0x186 <Button_read+0x7e>
 13e:	35 c0       	rjmp	.+106    	; 0x1aa <Button_read+0xa2>
	 //*ButtonState = PRESSED;
	 //*ButtonState = NOT_PRESSED;
	 
		case INTERNAL_PULL_UP_INPUT :
			
			if(input_value==HIGH)
 140:	89 81       	ldd	r24, Y+1	; 0x01
 142:	81 30       	cpi	r24, 0x01	; 1
 144:	19 f4       	brne	.+6      	; 0x14c <Button_read+0x44>
			{
				*ButtonState = NOT_PRESSED;
 146:	f8 01       	movw	r30, r16
 148:	10 82       	st	Z, r1
 14a:	2f c0       	rjmp	.+94     	; 0x1aa <Button_read+0xa2>
			}
			else if (input_value==LOW)
 14c:	81 11       	cpse	r24, r1
 14e:	2d c0       	rjmp	.+90     	; 0x1aa <Button_read+0xa2>
			{
				*ButtonState = PRESSED;
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	f8 01       	movw	r30, r16
 154:	80 83       	st	Z, r24
 156:	29 c0       	rjmp	.+82     	; 0x1aa <Button_read+0xa2>
			}
			break;
		////////////////// 
		case EXTERNAL_PULL_UP_INPUT:
		
			if(input_value==HIGH)
 158:	89 81       	ldd	r24, Y+1	; 0x01
 15a:	81 30       	cpi	r24, 0x01	; 1
 15c:	19 f4       	brne	.+6      	; 0x164 <Button_read+0x5c>
			{
				*ButtonState = NOT_PRESSED;
 15e:	f8 01       	movw	r30, r16
 160:	10 82       	st	Z, r1
 162:	23 c0       	rjmp	.+70     	; 0x1aa <Button_read+0xa2>
			}
			else if (input_value==LOW)
 164:	81 11       	cpse	r24, r1
 166:	21 c0       	rjmp	.+66     	; 0x1aa <Button_read+0xa2>
			{
				*ButtonState = PRESSED;
 168:	81 e0       	ldi	r24, 0x01	; 1
 16a:	f8 01       	movw	r30, r16
 16c:	80 83       	st	Z, r24
 16e:	1d c0       	rjmp	.+58     	; 0x1aa <Button_read+0xa2>
			}
			break;
		///////////////
		case EXTERNAL_PULL_DOWN_INPUT :
		
			if(input_value==HIGH)
 170:	89 81       	ldd	r24, Y+1	; 0x01
 172:	81 30       	cpi	r24, 0x01	; 1
 174:	19 f4       	brne	.+6      	; 0x17c <Button_read+0x74>
			{
				*ButtonState = PRESSED;
 176:	f8 01       	movw	r30, r16
 178:	80 83       	st	Z, r24
 17a:	17 c0       	rjmp	.+46     	; 0x1aa <Button_read+0xa2>
			}
			else if (input_value==LOW)
 17c:	81 11       	cpse	r24, r1
 17e:	15 c0       	rjmp	.+42     	; 0x1aa <Button_read+0xa2>
			{
				*ButtonState = NOT_PRESSED;
 180:	f8 01       	movw	r30, r16
 182:	10 82       	st	Z, r1
 184:	12 c0       	rjmp	.+36     	; 0x1aa <Button_read+0xa2>
			}
			break;
		/////////////////
		case NO_PULL_BUTTON_TO_GROUND_INPUT :	//this Button connection is Not Recommended Because it will Leave the Pin in a floating state (Not Logic HIGH Nor LOW) it will expose the pin to Noise (Noise will send a False PRESSED Status)
			
			if(input_value==LOW)
 186:	89 81       	ldd	r24, Y+1	; 0x01
 188:	81 11       	cpse	r24, r1
 18a:	04 c0       	rjmp	.+8      	; 0x194 <Button_read+0x8c>
			{
				*ButtonState = PRESSED;
 18c:	81 e0       	ldi	r24, 0x01	; 1
 18e:	f8 01       	movw	r30, r16
 190:	80 83       	st	Z, r24
 192:	0b c0       	rjmp	.+22     	; 0x1aa <Button_read+0xa2>
			}
			
			else
			{
				*ButtonState = NOT_PRESSED;
 194:	f8 01       	movw	r30, r16
 196:	10 82       	st	Z, r1
 198:	08 c0       	rjmp	.+16     	; 0x1aa <Button_read+0xa2>
			break;
		//////////////////////
		case NO_PULL_BUTTON_TO_VCC_INPUT : //this Button connection is Not Recommended Because it will Leave the Pin in a floating state (Not Logic HIGH Nor LOW) it will expose the pin to Noise (Noise will send a False PRESSED Status)

			
			if(input_value==HIGH)
 19a:	89 81       	ldd	r24, Y+1	; 0x01
 19c:	81 30       	cpi	r24, 0x01	; 1
 19e:	19 f4       	brne	.+6      	; 0x1a6 <Button_read+0x9e>
			{
				*ButtonState = PRESSED;
 1a0:	f8 01       	movw	r30, r16
 1a2:	80 83       	st	Z, r24
 1a4:	02 c0       	rjmp	.+4      	; 0x1aa <Button_read+0xa2>
			}
			
			else
			{
				*ButtonState = NOT_PRESSED;
 1a6:	f8 01       	movw	r30, r16
 1a8:	10 82       	st	Z, r1
			}
			break;
			
	 }//End of switch
	 
}// End of Function  Button_read()
 1aa:	0f 90       	pop	r0
 1ac:	df 91       	pop	r29
 1ae:	cf 91       	pop	r28
 1b0:	1f 91       	pop	r17
 1b2:	0f 91       	pop	r16
 1b4:	08 95       	ret

000001b6 <LED_init>:

static uint8_t LED_Activating_Logic_G;
//Scope of this Global variable is seen inside and out side of all of functions -- but only for this file Because of "static"  

void LED_init(uint8_t pinNumber,uint8_t portNumber, uint8_t LEDActivatingLogic)			// initiate LED (initiate MCU pin which connected to LED to Be OUTPUT )
{	
 1b6:	cf 93       	push	r28
 1b8:	c4 2f       	mov	r28, r20
	DIO_init( pinNumber, portNumber, OUT);
 1ba:	41 e0       	ldi	r20, 0x01	; 1
 1bc:	0e 94 29 01 	call	0x252	; 0x252 <DIO_init>
	LED_Activating_Logic_G =  LEDActivatingLogic;
 1c0:	c0 93 62 00 	sts	0x0062, r28	; 0x800062 <LED_Activating_Logic_G>
}
 1c4:	cf 91       	pop	r28
 1c6:	08 95       	ret

000001c8 <LED_on>:


void LED_on(uint8_t pinNumber,uint8_t portNumber)	// write HIGH/LOW on LED pin --> to be used as (LED OFF or LED ON) depend on the connected circuit (Active high or Active low Gates/Transistors (Current driver)) 
{
	
	DIO_write(pinNumber , portNumber , LED_Activating_Logic_G); // LED_Activating_Logic_G : ACTIVE_HIGH=1=HIGH / ACTIVE_LOW=0=LOW
 1c8:	40 91 62 00 	lds	r20, 0x0062	; 0x800062 <LED_Activating_Logic_G>
 1cc:	0e 94 a1 01 	call	0x342	; 0x342 <DIO_write>
 1d0:	08 95       	ret

000001d2 <LED_off>:


void LED_off(uint8_t pinNumber,uint8_t portNumber)			//to turn LED OFF we should write LOW/HIGH on LED pin -->  depend on the connected circuit (Active high or Active low Gates/Transistors (Current driver))
{
	
	DIO_write(pinNumber , portNumber , !LED_Activating_Logic_G);  // LED_Activating_Logic_G : ACTIVE_HIGH=1=HIGH / ACTIVE_LOW=0=LOW
 1d2:	41 e0       	ldi	r20, 0x01	; 1
 1d4:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <LED_Activating_Logic_G>
 1d8:	91 11       	cpse	r25, r1
 1da:	40 e0       	ldi	r20, 0x00	; 0
 1dc:	0e 94 a1 01 	call	0x342	; 0x342 <DIO_write>
 1e0:	08 95       	ret

000001e2 <main>:



int  main(void)
{
	Application_init();    //  to initiate the Used Peripherals &  Services --> Includes your code that runs once
 1e2:	0e 94 3e 00 	call	0x7c	; 0x7c <Application_init>

	Application_run();		// Includes your application code that Runs forever
 1e6:	0e 94 5d 00 	call	0xba	; 0xba <Application_run>
}
 1ea:	80 e0       	ldi	r24, 0x00	; 0
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	08 95       	ret

000001f0 <set_bit>:



void set_bit(uint8_t pinNumber,volatile uint8_t *portName)	// write 1 on this pin
{
	*portName |= (1<<pinNumber); // write 1 on this pin
 1f0:	fb 01       	movw	r30, r22
 1f2:	90 81       	ld	r25, Z
 1f4:	21 e0       	ldi	r18, 0x01	; 1
 1f6:	30 e0       	ldi	r19, 0x00	; 0
 1f8:	02 c0       	rjmp	.+4      	; 0x1fe <set_bit+0xe>
 1fa:	22 0f       	add	r18, r18
 1fc:	33 1f       	adc	r19, r19
 1fe:	8a 95       	dec	r24
 200:	e2 f7       	brpl	.-8      	; 0x1fa <set_bit+0xa>
 202:	29 2b       	or	r18, r25
 204:	20 83       	st	Z, r18
 206:	08 95       	ret

00000208 <clear_bit>:
}//End of function set_bit()


void clear_bit(uint8_t pinNumber,volatile uint8_t *portName) // write 0 on this pin
{
	*portName &= ~(1<<pinNumber); // write 0 on this pin
 208:	fb 01       	movw	r30, r22
 20a:	90 81       	ld	r25, Z
 20c:	21 e0       	ldi	r18, 0x01	; 1
 20e:	30 e0       	ldi	r19, 0x00	; 0
 210:	02 c0       	rjmp	.+4      	; 0x216 <clear_bit+0xe>
 212:	22 0f       	add	r18, r18
 214:	33 1f       	adc	r19, r19
 216:	8a 95       	dec	r24
 218:	e2 f7       	brpl	.-8      	; 0x212 <clear_bit+0xa>
 21a:	20 95       	com	r18
 21c:	29 23       	and	r18, r25
 21e:	20 83       	st	Z, r18
 220:	08 95       	ret

00000222 <get_bit>:
}//End of  function clear_bit()


void get_bit(uint8_t pinNumber,volatile uint8_t *portName,uint8_t **value)
{
**value =(((*portName)&(1<<pinNumber))>>pinNumber); // read this bit (get state)
 222:	da 01       	movw	r26, r20
 224:	ed 91       	ld	r30, X+
 226:	fc 91       	ld	r31, X
 228:	db 01       	movw	r26, r22
 22a:	4c 91       	ld	r20, X
 22c:	21 e0       	ldi	r18, 0x01	; 1
 22e:	30 e0       	ldi	r19, 0x00	; 0
 230:	08 2e       	mov	r0, r24
 232:	02 c0       	rjmp	.+4      	; 0x238 <get_bit+0x16>
 234:	22 0f       	add	r18, r18
 236:	33 1f       	adc	r19, r19
 238:	0a 94       	dec	r0
 23a:	e2 f7       	brpl	.-8      	; 0x234 <get_bit+0x12>
 23c:	50 e0       	ldi	r21, 0x00	; 0
 23e:	24 23       	and	r18, r20
 240:	35 23       	and	r19, r21
 242:	a9 01       	movw	r20, r18
 244:	02 c0       	rjmp	.+4      	; 0x24a <get_bit+0x28>
 246:	55 95       	asr	r21
 248:	47 95       	ror	r20
 24a:	8a 95       	dec	r24
 24c:	e2 f7       	brpl	.-8      	; 0x246 <get_bit+0x24>
 24e:	40 83       	st	Z, r20
 250:	08 95       	ret

00000252 <DIO_init>:
// global variables (extern / static)


//TODO
void DIO_init(uint8_t pinNumber,uint8_t portNumber,uint8_t direction) // Initialize DIO Pin Mode Direction(IN/OUT) //see these pages for parameter's default value https://stackoverflow.com/questions/1472138/c-default-arguments   https://modelingwithdata.org/arch/00000022.htm
{
 252:	cf 93       	push	r28
 254:	c8 2f       	mov	r28, r24
		////Make "DIO_init"function Return Error Value  if exist or return  OK or a Number if Succeeded
	//}
	//
	

	switch(portNumber)
 256:	62 34       	cpi	r22, 0x42	; 66
 258:	29 f1       	breq	.+74     	; 0x2a4 <DIO_init+0x52>
 25a:	18 f4       	brcc	.+6      	; 0x262 <DIO_init+0x10>
 25c:	61 34       	cpi	r22, 0x41	; 65
 25e:	39 f0       	breq	.+14     	; 0x26e <DIO_init+0x1c>
 260:	6e c0       	rjmp	.+220    	; 0x33e <DIO_init+0xec>
 262:	63 34       	cpi	r22, 0x43	; 67
 264:	c9 f1       	breq	.+114    	; 0x2d8 <DIO_init+0x86>
 266:	64 34       	cpi	r22, 0x44	; 68
 268:	09 f4       	brne	.+2      	; 0x26c <DIO_init+0x1a>
 26a:	50 c0       	rjmp	.+160    	; 0x30c <DIO_init+0xba>
 26c:	68 c0       	rjmp	.+208    	; 0x33e <DIO_init+0xec>
	{
		case PORT_A : 
			if(direction==OUT)
 26e:	41 30       	cpi	r20, 0x01	; 1
 270:	29 f4       	brne	.+10     	; 0x27c <DIO_init+0x2a>
			{
				//DDRA |= (1<<pinNumber);   // make pin direction -> output
				set_bit(pinNumber,DDRA);	// make pin direction -> output // write 1 on this pin
 272:	6a e3       	ldi	r22, 0x3A	; 58
 274:	70 e0       	ldi	r23, 0x00	; 0
 276:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <set_bit>
 27a:	61 c0       	rjmp	.+194    	; 0x33e <DIO_init+0xec>
			}
			else if(direction==IN)
 27c:	41 11       	cpse	r20, r1
 27e:	05 c0       	rjmp	.+10     	; 0x28a <DIO_init+0x38>
			{
				//DDRA &= ~(1<<pinNumber); // make pin direction -> input
				clear_bit(pinNumber,DDRA);		// write 0 on this pin
 280:	6a e3       	ldi	r22, 0x3A	; 58
 282:	70 e0       	ldi	r23, 0x00	; 0
 284:	0e 94 04 01 	call	0x208	; 0x208 <clear_bit>
 288:	5a c0       	rjmp	.+180    	; 0x33e <DIO_init+0xec>
			}
			else if (direction == INTERNALLY_PULLED_UP_INPUT)
 28a:	42 30       	cpi	r20, 0x02	; 2
 28c:	09 f0       	breq	.+2      	; 0x290 <DIO_init+0x3e>
 28e:	57 c0       	rjmp	.+174    	; 0x33e <DIO_init+0xec>
			{	
				//DDRA &= ~(1<<pinNumber); // make pin direction -> input
				//PORTA |=(1<<pinNumber);		// activate Internal Pull up Resistor (inside MCU , no external Pulling circuitry)
				clear_bit(pinNumber,DDRA);		// make pin direction -> input
 290:	6a e3       	ldi	r22, 0x3A	; 58
 292:	70 e0       	ldi	r23, 0x00	; 0
 294:	0e 94 04 01 	call	0x208	; 0x208 <clear_bit>
				set_bit(pinNumber,PORTA);		// activate Internal Pull up Resistor (inside MCU , no external Pulling circuitry)
 298:	6b e3       	ldi	r22, 0x3B	; 59
 29a:	70 e0       	ldi	r23, 0x00	; 0
 29c:	8c 2f       	mov	r24, r28
 29e:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <set_bit>
 2a2:	4d c0       	rjmp	.+154    	; 0x33e <DIO_init+0xec>
			}
			break;
		
		case PORT_B :
			
			if(direction==OUT)
 2a4:	41 30       	cpi	r20, 0x01	; 1
 2a6:	29 f4       	brne	.+10     	; 0x2b2 <DIO_init+0x60>
			{
				//DDRB |= (1<<pinNumber); // make pin direction -> output
				set_bit(pinNumber,DDRB);	// make pin direction -> output	// write 1 on this pin
 2a8:	67 e3       	ldi	r22, 0x37	; 55
 2aa:	70 e0       	ldi	r23, 0x00	; 0
 2ac:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <set_bit>
 2b0:	46 c0       	rjmp	.+140    	; 0x33e <DIO_init+0xec>
			}
			else if(direction==IN)
 2b2:	41 11       	cpse	r20, r1
 2b4:	05 c0       	rjmp	.+10     	; 0x2c0 <DIO_init+0x6e>
			{
				//DDRB &= ~(1<<pinNumber); // make pin direction -> input
				clear_bit(pinNumber,DDRB);	// make pin direction -> input
 2b6:	67 e3       	ldi	r22, 0x37	; 55
 2b8:	70 e0       	ldi	r23, 0x00	; 0
 2ba:	0e 94 04 01 	call	0x208	; 0x208 <clear_bit>
 2be:	3f c0       	rjmp	.+126    	; 0x33e <DIO_init+0xec>
			}
			else if (direction == INTERNALLY_PULLED_UP_INPUT)
 2c0:	42 30       	cpi	r20, 0x02	; 2
 2c2:	e9 f5       	brne	.+122    	; 0x33e <DIO_init+0xec>
			{	
				//DDRB &= ~(1<<pinNumber); // make pin direction -> input
				//PORTB |=(1<<pinNumber);		// activate Internal Pull up Resistor (inside MCU , not external circuitry)
				
				clear_bit(pinNumber,DDRB);	// make pin direction -> input
 2c4:	67 e3       	ldi	r22, 0x37	; 55
 2c6:	70 e0       	ldi	r23, 0x00	; 0
 2c8:	0e 94 04 01 	call	0x208	; 0x208 <clear_bit>
				set_bit(pinNumber,PORTB);	// activate Internal Pull up Resistor (inside MCU , not external circuitry)
 2cc:	68 e3       	ldi	r22, 0x38	; 56
 2ce:	70 e0       	ldi	r23, 0x00	; 0
 2d0:	8c 2f       	mov	r24, r28
 2d2:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <set_bit>
 2d6:	33 c0       	rjmp	.+102    	; 0x33e <DIO_init+0xec>
			}
			break;
			
		case PORT_C :
		
			if(direction==OUT)
 2d8:	41 30       	cpi	r20, 0x01	; 1
 2da:	29 f4       	brne	.+10     	; 0x2e6 <DIO_init+0x94>
			{
				//DDRC |= (1<<pinNumber); // make pin direction -> output
				set_bit(pinNumber,DDRC);	// make pin direction -> output	// write 1 on this pin
 2dc:	64 e3       	ldi	r22, 0x34	; 52
 2de:	70 e0       	ldi	r23, 0x00	; 0
 2e0:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <set_bit>
 2e4:	2c c0       	rjmp	.+88     	; 0x33e <DIO_init+0xec>
			}
			else if(direction==IN)
 2e6:	41 11       	cpse	r20, r1
 2e8:	05 c0       	rjmp	.+10     	; 0x2f4 <DIO_init+0xa2>
			{
				//DDRC &= ~(1<<pinNumber); // make pin direction -> input
				clear_bit(pinNumber,DDRC);	// make pin direction -> input
 2ea:	64 e3       	ldi	r22, 0x34	; 52
 2ec:	70 e0       	ldi	r23, 0x00	; 0
 2ee:	0e 94 04 01 	call	0x208	; 0x208 <clear_bit>
 2f2:	25 c0       	rjmp	.+74     	; 0x33e <DIO_init+0xec>
				
			}
			else if (direction == INTERNALLY_PULLED_UP_INPUT)
 2f4:	42 30       	cpi	r20, 0x02	; 2
 2f6:	19 f5       	brne	.+70     	; 0x33e <DIO_init+0xec>
			{	
				//DDRC &= ~(1<<pinNumber); // make pin direction -> input
				//PORTC |=(1<<pinNumber);		// activate Internal Pull up Resistor (inside MCU , not external circuitry)
				clear_bit(pinNumber,DDRC);	// make pin direction -> input
 2f8:	64 e3       	ldi	r22, 0x34	; 52
 2fa:	70 e0       	ldi	r23, 0x00	; 0
 2fc:	0e 94 04 01 	call	0x208	; 0x208 <clear_bit>
				set_bit(pinNumber,PORTC);	// activate Internal Pull up Resistor (inside MCU , not external circuitry)
 300:	65 e3       	ldi	r22, 0x35	; 53
 302:	70 e0       	ldi	r23, 0x00	; 0
 304:	8c 2f       	mov	r24, r28
 306:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <set_bit>
 30a:	19 c0       	rjmp	.+50     	; 0x33e <DIO_init+0xec>
			}
			break;
		
		case PORT_D :
			
			if(direction==OUT)
 30c:	41 30       	cpi	r20, 0x01	; 1
 30e:	29 f4       	brne	.+10     	; 0x31a <DIO_init+0xc8>
			{
				//DDRD |= (1<<pinNumber); // make pin direction -> output
				set_bit(pinNumber,DDRD);	// make pin direction -> output	// write 1 on this pin
 310:	61 e3       	ldi	r22, 0x31	; 49
 312:	70 e0       	ldi	r23, 0x00	; 0
 314:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <set_bit>
 318:	12 c0       	rjmp	.+36     	; 0x33e <DIO_init+0xec>
				
			}
			else if(direction==IN)
 31a:	41 11       	cpse	r20, r1
 31c:	05 c0       	rjmp	.+10     	; 0x328 <DIO_init+0xd6>
			{
				//DDRD &= ~(1<<pinNumber); // make pin direction -> input
				clear_bit(pinNumber,DDRD);	// make pin direction -> input
 31e:	61 e3       	ldi	r22, 0x31	; 49
 320:	70 e0       	ldi	r23, 0x00	; 0
 322:	0e 94 04 01 	call	0x208	; 0x208 <clear_bit>
 326:	0b c0       	rjmp	.+22     	; 0x33e <DIO_init+0xec>
			}
			else if (direction == INTERNALLY_PULLED_UP_INPUT)
 328:	42 30       	cpi	r20, 0x02	; 2
 32a:	49 f4       	brne	.+18     	; 0x33e <DIO_init+0xec>
			{	
				//DDRD &= ~(1<<pinNumber);  // make pin direction -> input
				//PORTD |=(1<<pinNumber);	// activate Internal Pull up Resistor (inside MCU , not external circuitry)
				
				clear_bit(pinNumber,DDRD);	// make pin direction -> input
 32c:	61 e3       	ldi	r22, 0x31	; 49
 32e:	70 e0       	ldi	r23, 0x00	; 0
 330:	0e 94 04 01 	call	0x208	; 0x208 <clear_bit>
				set_bit(pinNumber,PORTD);	// activate Internal Pull up Resistor (inside MCU , not external circuitry)
 334:	62 e3       	ldi	r22, 0x32	; 50
 336:	70 e0       	ldi	r23, 0x00	; 0
 338:	8c 2f       	mov	r24, r28
 33a:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <set_bit>
		
	} // End of switch



} // End of Function -> DIO_init
 33e:	cf 91       	pop	r28
 340:	08 95       	ret

00000342 <DIO_write>:
		//// Error Handling
		////Make "DIO_init"function Return Error Value  if exist or return  OK or a Number if Succeeded
	//}	
	//

	switch(portNumber)
 342:	62 34       	cpi	r22, 0x42	; 66
 344:	b9 f0       	breq	.+46     	; 0x374 <DIO_write+0x32>
 346:	18 f4       	brcc	.+6      	; 0x34e <DIO_write+0xc>
 348:	61 34       	cpi	r22, 0x41	; 65
 34a:	31 f0       	breq	.+12     	; 0x358 <DIO_write+0x16>
 34c:	08 95       	ret
 34e:	63 34       	cpi	r22, 0x43	; 67
 350:	f9 f0       	breq	.+62     	; 0x390 <DIO_write+0x4e>
 352:	64 34       	cpi	r22, 0x44	; 68
 354:	59 f1       	breq	.+86     	; 0x3ac <DIO_write+0x6a>
 356:	08 95       	ret
	{
		case PORT_A :
			if(value==HIGH)
 358:	41 30       	cpi	r20, 0x01	; 1
 35a:	29 f4       	brne	.+10     	; 0x366 <DIO_write+0x24>
			{
				//PORTA |= (1<<pinNumber); // write 1 on this pin
				set_bit(pinNumber,PORTA);
 35c:	6b e3       	ldi	r22, 0x3B	; 59
 35e:	70 e0       	ldi	r23, 0x00	; 0
 360:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <set_bit>
 364:	08 95       	ret
			}
			else if(value==LOW)
 366:	41 11       	cpse	r20, r1
 368:	2e c0       	rjmp	.+92     	; 0x3c6 <DIO_write+0x84>
			{
				//PORTA &= ~(1<<pinNumber); // write 0 on this pin
				clear_bit(pinNumber,PORTA);
 36a:	6b e3       	ldi	r22, 0x3B	; 59
 36c:	70 e0       	ldi	r23, 0x00	; 0
 36e:	0e 94 04 01 	call	0x208	; 0x208 <clear_bit>
 372:	08 95       	ret
			}
			break;
		
		case PORT_B :
	
			if(value==HIGH)
 374:	41 30       	cpi	r20, 0x01	; 1
 376:	29 f4       	brne	.+10     	; 0x382 <DIO_write+0x40>
			{
				//PORTB |= (1<<pinNumber); // write 1 on this pin
				set_bit(pinNumber,PORTB);
 378:	68 e3       	ldi	r22, 0x38	; 56
 37a:	70 e0       	ldi	r23, 0x00	; 0
 37c:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <set_bit>
 380:	08 95       	ret
			}
			else if(value==LOW)
 382:	41 11       	cpse	r20, r1
 384:	20 c0       	rjmp	.+64     	; 0x3c6 <DIO_write+0x84>
			{
				//PORTB &= ~(1<<pinNumber); // write 0 on this pin
				clear_bit(pinNumber,PORTB);
 386:	68 e3       	ldi	r22, 0x38	; 56
 388:	70 e0       	ldi	r23, 0x00	; 0
 38a:	0e 94 04 01 	call	0x208	; 0x208 <clear_bit>
 38e:	08 95       	ret
				//Make "DIO_init"function Return Error Value  if exist or return  OK or a Number if Succeeded
			}
			break;
		case PORT_C :
	
			if(value==HIGH)
 390:	41 30       	cpi	r20, 0x01	; 1
 392:	29 f4       	brne	.+10     	; 0x39e <DIO_write+0x5c>
			{
				//PORTC |= (1<<pinNumber); // write 1 on this pin
				set_bit(pinNumber,PORTC);
 394:	65 e3       	ldi	r22, 0x35	; 53
 396:	70 e0       	ldi	r23, 0x00	; 0
 398:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <set_bit>
 39c:	08 95       	ret
			}
			else if(value==LOW)
 39e:	41 11       	cpse	r20, r1
 3a0:	12 c0       	rjmp	.+36     	; 0x3c6 <DIO_write+0x84>
			{
				//PORTC &= ~(1<<pinNumber); // write 0 on this pin
				clear_bit(pinNumber,PORTC);
 3a2:	65 e3       	ldi	r22, 0x35	; 53
 3a4:	70 e0       	ldi	r23, 0x00	; 0
 3a6:	0e 94 04 01 	call	0x208	; 0x208 <clear_bit>
 3aa:	08 95       	ret
			}
			break;
	
		case PORT_D :
	
			if(value==HIGH)
 3ac:	41 30       	cpi	r20, 0x01	; 1
 3ae:	29 f4       	brne	.+10     	; 0x3ba <DIO_write+0x78>
			{
				//PORTD |= (1<<pinNumber); // write 1 on this pin
				set_bit(pinNumber,PORTD);
 3b0:	62 e3       	ldi	r22, 0x32	; 50
 3b2:	70 e0       	ldi	r23, 0x00	; 0
 3b4:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <set_bit>
 3b8:	08 95       	ret
			}
			else if(value==LOW)
 3ba:	41 11       	cpse	r20, r1
 3bc:	04 c0       	rjmp	.+8      	; 0x3c6 <DIO_write+0x84>
			{
				//PORTD &= ~(1<<pinNumber); // write 0 on this pin
				clear_bit(pinNumber,PORTD);
 3be:	62 e3       	ldi	r22, 0x32	; 50
 3c0:	70 e0       	ldi	r23, 0x00	; 0
 3c2:	0e 94 04 01 	call	0x208	; 0x208 <clear_bit>
 3c6:	08 95       	ret

000003c8 <DIO_read>:




void DIO_read(uint8_t pinNumber,uint8_t portNumber,uint8_t *value) // read dio pin (get pin status)
{
 3c8:	cf 93       	push	r28
 3ca:	df 93       	push	r29
 3cc:	00 d0       	rcall	.+0      	; 0x3ce <DIO_read+0x6>
 3ce:	cd b7       	in	r28, 0x3d	; 61
 3d0:	de b7       	in	r29, 0x3e	; 62
 3d2:	5a 83       	std	Y+2, r21	; 0x02
 3d4:	49 83       	std	Y+1, r20	; 0x01
	
	switch(portNumber)
 3d6:	62 34       	cpi	r22, 0x42	; 66
 3d8:	89 f0       	breq	.+34     	; 0x3fc <DIO_read+0x34>
 3da:	18 f4       	brcc	.+6      	; 0x3e2 <DIO_read+0x1a>
 3dc:	61 34       	cpi	r22, 0x41	; 65
 3de:	31 f0       	breq	.+12     	; 0x3ec <DIO_read+0x24>
 3e0:	24 c0       	rjmp	.+72     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
 3e2:	63 34       	cpi	r22, 0x43	; 67
 3e4:	99 f0       	breq	.+38     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 3e6:	64 34       	cpi	r22, 0x44	; 68
 3e8:	c9 f0       	breq	.+50     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 3ea:	1f c0       	rjmp	.+62     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
	{
		case PORT_A :
		
			//*value =((PINA&(1<<pinNumber))>>pinNumber); // read this pin (get state)
			get_bit(pinNumber,PINA, &value); // read this bit (get bit state)
 3ec:	ae 01       	movw	r20, r28
 3ee:	4f 5f       	subi	r20, 0xFF	; 255
 3f0:	5f 4f       	sbci	r21, 0xFF	; 255
 3f2:	69 e3       	ldi	r22, 0x39	; 57
 3f4:	70 e0       	ldi	r23, 0x00	; 0
 3f6:	0e 94 11 01 	call	0x222	; 0x222 <get_bit>
			break;
 3fa:	17 c0       	rjmp	.+46     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
		
		case PORT_B :
			
			//*value =((PINB&(1<<pinNumber))>>pinNumber); // read this pin (get state)
			get_bit(pinNumber,PINB, &value); // read this bit (get bit state)
 3fc:	ae 01       	movw	r20, r28
 3fe:	4f 5f       	subi	r20, 0xFF	; 255
 400:	5f 4f       	sbci	r21, 0xFF	; 255
 402:	66 e3       	ldi	r22, 0x36	; 54
 404:	70 e0       	ldi	r23, 0x00	; 0
 406:	0e 94 11 01 	call	0x222	; 0x222 <get_bit>
			break;
 40a:	0f c0       	rjmp	.+30     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
			
		case PORT_C :
		
			//*value =((PINC&(1<<pinNumber))>>pinNumber); // read this pin (get state)
			get_bit(pinNumber,PINA, &value); // read this bit (get bit state)
 40c:	ae 01       	movw	r20, r28
 40e:	4f 5f       	subi	r20, 0xFF	; 255
 410:	5f 4f       	sbci	r21, 0xFF	; 255
 412:	69 e3       	ldi	r22, 0x39	; 57
 414:	70 e0       	ldi	r23, 0x00	; 0
 416:	0e 94 11 01 	call	0x222	; 0x222 <get_bit>
			break;
 41a:	07 c0       	rjmp	.+14     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
		
		case PORT_D :
		
			//*value =((PIND&(1<<pinNumber))>>pinNumber); // read this pin (get state)
			get_bit(pinNumber,PINA, &value); // read this bit (get bit state)
 41c:	ae 01       	movw	r20, r28
 41e:	4f 5f       	subi	r20, 0xFF	; 255
 420:	5f 4f       	sbci	r21, 0xFF	; 255
 422:	69 e3       	ldi	r22, 0x39	; 57
 424:	70 e0       	ldi	r23, 0x00	; 0
 426:	0e 94 11 01 	call	0x222	; 0x222 <get_bit>

	

	} //End of switch

} // End of Function -> DIO_read
 42a:	0f 90       	pop	r0
 42c:	0f 90       	pop	r0
 42e:	df 91       	pop	r29
 430:	cf 91       	pop	r28
 432:	08 95       	ret

00000434 <_exit>:
 434:	f8 94       	cli

00000436 <__stop_program>:
 436:	ff cf       	rjmp	.-2      	; 0x436 <__stop_program>
