
HelloAVR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000676  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000006ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800060  00800060  000006ea  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006ea  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000071c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  00000758  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000cfc  00000000  00000000  00000830  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000838  00000000  00000000  0000152c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000082e  00000000  00000000  00001d64  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000158  00000000  00000000  00002594  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000493  00000000  00000000  000026ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c1b  00000000  00000000  00002b7f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  0000379a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a3 36       	cpi	r26, 0x63	; 99
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 2d 01 	call	0x25a	; 0x25a <main>
  74:	0c 94 39 03 	jmp	0x672	; 0x672 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <Application_init>:




void Application_init()
{
  7c:	cf 93       	push	r28
	
	

	for(uint8_t pinNumber=0; pinNumber<8;pinNumber++)
  7e:	c0 e0       	ldi	r28, 0x00	; 0
	{
		LED_init(pinNumber,PORT_D, ACTIVE_HIGH);
  80:	41 e0       	ldi	r20, 0x01	; 1
  82:	64 e4       	ldi	r22, 0x44	; 68
  84:	8c 2f       	mov	r24, r28
  86:	0e 94 08 01 	call	0x210	; 0x210 <LED_init>
void Application_init()
{
	
	

	for(uint8_t pinNumber=0; pinNumber<8;pinNumber++)
  8a:	cf 5f       	subi	r28, 0xFF	; 255
  8c:	c8 30       	cpi	r28, 0x08	; 8
  8e:	c1 f7       	brne	.-16     	; 0x80 <Application_init+0x4>
		LED_init(pinNumber,PORT_D, ACTIVE_HIGH);
	}
	
	
	
	LED_init(1,PORT_B, ACTIVE_HIGH);
  90:	41 e0       	ldi	r20, 0x01	; 1
  92:	62 e4       	ldi	r22, 0x42	; 66
  94:	81 e0       	ldi	r24, 0x01	; 1
  96:	0e 94 08 01 	call	0x210	; 0x210 <LED_init>
	
	LED_init(5,PORT_B, ACTIVE_HIGH);
  9a:	41 e0       	ldi	r20, 0x01	; 1
  9c:	62 e4       	ldi	r22, 0x42	; 66
  9e:	85 e0       	ldi	r24, 0x05	; 5
  a0:	0e 94 08 01 	call	0x210	; 0x210 <LED_init>

	for(uint8_t pinNumber=0;pinNumber<8;pinNumber++)
  a4:	c0 e0       	ldi	r28, 0x00	; 0
	{
		Button_init(pinNumber,PORT_A,INTERNAL_PULL_UP_INPUT);
  a6:	42 e0       	ldi	r20, 0x02	; 2
  a8:	61 e4       	ldi	r22, 0x41	; 65
  aa:	8c 2f       	mov	r24, r28
  ac:	0e 94 8b 00 	call	0x116	; 0x116 <Button_init>
	
	LED_init(1,PORT_B, ACTIVE_HIGH);
	
	LED_init(5,PORT_B, ACTIVE_HIGH);

	for(uint8_t pinNumber=0;pinNumber<8;pinNumber++)
  b0:	cf 5f       	subi	r28, 0xFF	; 255
  b2:	c8 30       	cpi	r28, 0x08	; 8
  b4:	c1 f7       	brne	.-16     	; 0xa6 <Application_init+0x2a>
	{
		Button_init(pinNumber,PORT_A,INTERNAL_PULL_UP_INPUT);
	}

	
}// End of Application_init()
  b6:	cf 91       	pop	r28
  b8:	08 95       	ret

000000ba <Application_run>:


    /* Replace with your application code */
    while (1) 
    {
		for(uint8_t pinNumber=0; pinNumber<8; pinNumber++)
  ba:	c0 e0       	ldi	r28, 0x00	; 0
		{
			Button_read(pinNumber,PORT_A,&ButtonState); 
  bc:	40 e6       	ldi	r20, 0x60	; 96
  be:	50 e0       	ldi	r21, 0x00	; 0
  c0:	61 e4       	ldi	r22, 0x41	; 65
  c2:	8c 2f       	mov	r24, r28
  c4:	0e 94 b1 00 	call	0x162	; 0x162 <Button_read>
			
			if(ButtonState==PRESSED)
  c8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  cc:	81 30       	cpi	r24, 0x01	; 1
  ce:	29 f4       	brne	.+10     	; 0xda <Application_run+0x20>
			
				LED_on(pinNumber,PORT_D);
  d0:	64 e4       	ldi	r22, 0x44	; 68
  d2:	8c 2f       	mov	r24, r28
  d4:	0e 94 11 01 	call	0x222	; 0x222 <LED_on>
  d8:	04 c0       	rjmp	.+8      	; 0xe2 <Application_run+0x28>
				
			else  // ButtonState==NOT_PRESSED
			
				LED_off(pinNumber,PORT_D);
  da:	64 e4       	ldi	r22, 0x44	; 68
  dc:	8c 2f       	mov	r24, r28
  de:	0e 94 1f 01 	call	0x23e	; 0x23e <LED_off>


    /* Replace with your application code */
    while (1) 
    {
		for(uint8_t pinNumber=0; pinNumber<8; pinNumber++)
  e2:	cf 5f       	subi	r28, 0xFF	; 255
  e4:	c8 30       	cpi	r28, 0x08	; 8
  e6:	51 f7       	brne	.-44     	; 0xbc <Application_run+0x2>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e8:	2f e5       	ldi	r18, 0x5F	; 95
  ea:	8a ee       	ldi	r24, 0xEA	; 234
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	21 50       	subi	r18, 0x01	; 1
  f0:	80 40       	sbci	r24, 0x00	; 0
  f2:	90 40       	sbci	r25, 0x00	; 0
  f4:	e1 f7       	brne	.-8      	; 0xee <Application_run+0x34>
  f6:	00 c0       	rjmp	.+0      	; 0xf8 <Application_run+0x3e>
  f8:	00 00       	nop
				LED_off(pinNumber,PORT_D);
					
		} // End of for
			
		_delay_ms(300);
		DIO_toggle( 5, PORT_B) ; // need DIO_init first
  fa:	62 e4       	ldi	r22, 0x42	; 66
  fc:	85 e0       	ldi	r24, 0x05	; 5
  fe:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <DIO_toggle>
 102:	2f e5       	ldi	r18, 0x5F	; 95
 104:	8a ee       	ldi	r24, 0xEA	; 234
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	21 50       	subi	r18, 0x01	; 1
 10a:	80 40       	sbci	r24, 0x00	; 0
 10c:	90 40       	sbci	r25, 0x00	; 0
 10e:	e1 f7       	brne	.-8      	; 0x108 <Application_run+0x4e>
 110:	00 c0       	rjmp	.+0      	; 0x112 <Application_run+0x58>
 112:	00 00       	nop
 114:	d2 cf       	rjmp	.-92     	; 0xba <Application_run>

00000116 <Button_init>:
// Error Source!!!!!!!!!!   !!!!!!!!!  !!!!!!   !!!!!!  !!!!  !!!!!!    !!!!!!! <<<<<<<<<<<<<<<<<<<<<<<<-------------<<<<<<<<<<<<<
static uint8_t Input_Pin_Mode_G;


void Button_init(uint8_t pinNumber,uint8_t portNumber,uint8_t InputPinMode)  // Direction = INPUT
{
 116:	cf 93       	push	r28
 118:	c4 2f       	mov	r28, r20
	
	switch (InputPinMode)
 11a:	44 30       	cpi	r20, 0x04	; 4
 11c:	d9 f0       	breq	.+54     	; 0x154 <Button_init+0x3e>
 11e:	28 f4       	brcc	.+10     	; 0x12a <Button_init+0x14>
 120:	42 30       	cpi	r20, 0x02	; 2
 122:	41 f0       	breq	.+16     	; 0x134 <Button_init+0x1e>
 124:	43 30       	cpi	r20, 0x03	; 3
 126:	91 f0       	breq	.+36     	; 0x14c <Button_init+0x36>
 128:	18 c0       	rjmp	.+48     	; 0x15a <Button_init+0x44>
 12a:	45 30       	cpi	r20, 0x05	; 5
 12c:	39 f0       	breq	.+14     	; 0x13c <Button_init+0x26>
 12e:	46 30       	cpi	r20, 0x06	; 6
 130:	49 f0       	breq	.+18     	; 0x144 <Button_init+0x2e>
 132:	13 c0       	rjmp	.+38     	; 0x15a <Button_init+0x44>
	 {
	 
		case INTERNAL_PULL_UP_INPUT:
		
			DIO_init(pinNumber,portNumber,INTERNAL_PULL_UP_INPUT);
 134:	42 e0       	ldi	r20, 0x02	; 2
 136:	0e 94 34 01 	call	0x268	; 0x268 <DIO_init>
			break;
 13a:	0f c0       	rjmp	.+30     	; 0x15a <Button_init+0x44>
			 
// TODO : Optimize this code  	 
		case NO_PULL_BUTTON_TO_VCC_INPUT:
			
			DIO_init(pinNumber,portNumber,IN); 
 13c:	40 e0       	ldi	r20, 0x00	; 0
 13e:	0e 94 34 01 	call	0x268	; 0x268 <DIO_init>
			break;
 142:	0b c0       	rjmp	.+22     	; 0x15a <Button_init+0x44>
			
		case NO_PULL_BUTTON_TO_GROUND_INPUT:
		
			DIO_init(pinNumber,portNumber,IN);
 144:	40 e0       	ldi	r20, 0x00	; 0
 146:	0e 94 34 01 	call	0x268	; 0x268 <DIO_init>
			break;
 14a:	07 c0       	rjmp	.+14     	; 0x15a <Button_init+0x44>
		
		case EXTERNAL_PULL_UP_INPUT:
			
			DIO_init(pinNumber,portNumber,IN); 
 14c:	40 e0       	ldi	r20, 0x00	; 0
 14e:	0e 94 34 01 	call	0x268	; 0x268 <DIO_init>
			break;
 152:	03 c0       	rjmp	.+6      	; 0x15a <Button_init+0x44>
		
		case EXTERNAL_PULL_DOWN_INPUT:
			
			DIO_init(pinNumber,portNumber,IN); 
 154:	40 e0       	ldi	r20, 0x00	; 0
 156:	0e 94 34 01 	call	0x268	; 0x268 <DIO_init>
			break;
	 }	//End of switch
			
Input_Pin_Mode_G = InputPinMode; // transmit Value of InputPinMode to outside of this function	
 15a:	c0 93 61 00 	sts	0x0061, r28	; 0x800061 <Input_Pin_Mode_G>
					
}// End of Function  Button_init()
 15e:	cf 91       	pop	r28
 160:	08 95       	ret

00000162 <Button_read>:




void Button_read(uint8_t pinNumber,uint8_t portNumber,uint8_t *ButtonState)		
{
 162:	0f 93       	push	r16
 164:	1f 93       	push	r17
 166:	cf 93       	push	r28
 168:	df 93       	push	r29
 16a:	1f 92       	push	r1
 16c:	cd b7       	in	r28, 0x3d	; 61
 16e:	de b7       	in	r29, 0x3e	; 62
 170:	8a 01       	movw	r16, r20
	
	uint8_t input_value;
	//uint8_t* InputPinMode =&direction ; //Initialize Value of pinMode

	 DIO_read(pinNumber, portNumber, &input_value); // read dio
 172:	ae 01       	movw	r20, r28
 174:	4f 5f       	subi	r20, 0xFF	; 255
 176:	5f 4f       	sbci	r21, 0xFF	; 255
 178:	0e 94 9a 02 	call	0x534	; 0x534 <DIO_read>
	 
	 switch (Input_Pin_Mode_G)
 17c:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <Input_Pin_Mode_G>
 180:	84 30       	cpi	r24, 0x04	; 4
 182:	19 f1       	breq	.+70     	; 0x1ca <Button_read+0x68>
 184:	28 f4       	brcc	.+10     	; 0x190 <Button_read+0x2e>
 186:	82 30       	cpi	r24, 0x02	; 2
 188:	41 f0       	breq	.+16     	; 0x19a <Button_read+0x38>
 18a:	83 30       	cpi	r24, 0x03	; 3
 18c:	91 f0       	breq	.+36     	; 0x1b2 <Button_read+0x50>
 18e:	3a c0       	rjmp	.+116    	; 0x204 <Button_read+0xa2>
 190:	85 30       	cpi	r24, 0x05	; 5
 192:	81 f1       	breq	.+96     	; 0x1f4 <Button_read+0x92>
 194:	86 30       	cpi	r24, 0x06	; 6
 196:	21 f1       	breq	.+72     	; 0x1e0 <Button_read+0x7e>
 198:	35 c0       	rjmp	.+106    	; 0x204 <Button_read+0xa2>
	 //*ButtonState = PRESSED;
	 //*ButtonState = NOT_PRESSED;
	 
		case INTERNAL_PULL_UP_INPUT :
			
			if(input_value==HIGH)
 19a:	89 81       	ldd	r24, Y+1	; 0x01
 19c:	81 30       	cpi	r24, 0x01	; 1
 19e:	19 f4       	brne	.+6      	; 0x1a6 <Button_read+0x44>
			{
				*ButtonState = NOT_PRESSED;
 1a0:	f8 01       	movw	r30, r16
 1a2:	10 82       	st	Z, r1
 1a4:	2f c0       	rjmp	.+94     	; 0x204 <Button_read+0xa2>
			}
			else if (input_value==LOW)
 1a6:	81 11       	cpse	r24, r1
 1a8:	2d c0       	rjmp	.+90     	; 0x204 <Button_read+0xa2>
			{
				*ButtonState = PRESSED;
 1aa:	81 e0       	ldi	r24, 0x01	; 1
 1ac:	f8 01       	movw	r30, r16
 1ae:	80 83       	st	Z, r24
 1b0:	29 c0       	rjmp	.+82     	; 0x204 <Button_read+0xa2>
			}
			break;
		//////////////////
		case EXTERNAL_PULL_UP_INPUT:
		
			if(input_value==HIGH)
 1b2:	89 81       	ldd	r24, Y+1	; 0x01
 1b4:	81 30       	cpi	r24, 0x01	; 1
 1b6:	19 f4       	brne	.+6      	; 0x1be <Button_read+0x5c>
			{
				*ButtonState = NOT_PRESSED;
 1b8:	f8 01       	movw	r30, r16
 1ba:	10 82       	st	Z, r1
 1bc:	23 c0       	rjmp	.+70     	; 0x204 <Button_read+0xa2>
			}
			else if (input_value==LOW)
 1be:	81 11       	cpse	r24, r1
 1c0:	21 c0       	rjmp	.+66     	; 0x204 <Button_read+0xa2>
			{
				*ButtonState = PRESSED;
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	f8 01       	movw	r30, r16
 1c6:	80 83       	st	Z, r24
 1c8:	1d c0       	rjmp	.+58     	; 0x204 <Button_read+0xa2>
			}
			break;
		///////////////
		case EXTERNAL_PULL_DOWN_INPUT :
		
			if(input_value==HIGH)
 1ca:	89 81       	ldd	r24, Y+1	; 0x01
 1cc:	81 30       	cpi	r24, 0x01	; 1
 1ce:	19 f4       	brne	.+6      	; 0x1d6 <Button_read+0x74>
			{
				*ButtonState = PRESSED;
 1d0:	f8 01       	movw	r30, r16
 1d2:	80 83       	st	Z, r24
 1d4:	17 c0       	rjmp	.+46     	; 0x204 <Button_read+0xa2>
			}
			else if (input_value==LOW)
 1d6:	81 11       	cpse	r24, r1
 1d8:	15 c0       	rjmp	.+42     	; 0x204 <Button_read+0xa2>
			{
				*ButtonState = NOT_PRESSED;
 1da:	f8 01       	movw	r30, r16
 1dc:	10 82       	st	Z, r1
 1de:	12 c0       	rjmp	.+36     	; 0x204 <Button_read+0xa2>
			}
			break;
		/////////////////
		case NO_PULL_BUTTON_TO_GROUND_INPUT :	//Not Recommended for a Button Use Because of Button exposure to Noise (Noise will send a False PRESSED Status)
			
			if(input_value==LOW)
 1e0:	89 81       	ldd	r24, Y+1	; 0x01
 1e2:	81 11       	cpse	r24, r1
 1e4:	04 c0       	rjmp	.+8      	; 0x1ee <Button_read+0x8c>
			{
				*ButtonState = PRESSED;
 1e6:	81 e0       	ldi	r24, 0x01	; 1
 1e8:	f8 01       	movw	r30, r16
 1ea:	80 83       	st	Z, r24
 1ec:	0b c0       	rjmp	.+22     	; 0x204 <Button_read+0xa2>
			}
			
			else
			{
				*ButtonState = NOT_PRESSED;
 1ee:	f8 01       	movw	r30, r16
 1f0:	10 82       	st	Z, r1
 1f2:	08 c0       	rjmp	.+16     	; 0x204 <Button_read+0xa2>
			}
			break;
		//////////////////////
		case NO_PULL_BUTTON_TO_VCC_INPUT : //Not Recommended for a Button Use Because of Button exposure to Noise (Noise will send a False PRESSED Status)
			
			if(input_value==HIGH)
 1f4:	89 81       	ldd	r24, Y+1	; 0x01
 1f6:	81 30       	cpi	r24, 0x01	; 1
 1f8:	19 f4       	brne	.+6      	; 0x200 <Button_read+0x9e>
			{
				*ButtonState = PRESSED;
 1fa:	f8 01       	movw	r30, r16
 1fc:	80 83       	st	Z, r24
 1fe:	02 c0       	rjmp	.+4      	; 0x204 <Button_read+0xa2>
			}
			
			else
			{
				*ButtonState = NOT_PRESSED;
 200:	f8 01       	movw	r30, r16
 202:	10 82       	st	Z, r1
			}
			break;
			
	 }	//End of switch
	 
}	// End of Function  Button_read()
 204:	0f 90       	pop	r0
 206:	df 91       	pop	r29
 208:	cf 91       	pop	r28
 20a:	1f 91       	pop	r17
 20c:	0f 91       	pop	r16
 20e:	08 95       	ret

00000210 <LED_init>:
// Error Source!!!!!!!!!!   !!!!!!!!!  !!!!!!   !!!!!!  !!!!  !!!!!!    !!!!!!! <<<<<<<<<<<<<<<<<<<<<<<<-------------<<<<<<<<<<<<<
static uint8_t LED_Activating_Logic_G;


void LED_init(uint8_t pinNumber,uint8_t portNumber, uint8_t LEDActivatingLogic)			// initiate LED (initiate MCU pin which connected to LED to Be OUTPUT )
{	
 210:	cf 93       	push	r28
 212:	c4 2f       	mov	r28, r20
	DIO_init( pinNumber, portNumber, OUT);
 214:	41 e0       	ldi	r20, 0x01	; 1
 216:	0e 94 34 01 	call	0x268	; 0x268 <DIO_init>
	LED_Activating_Logic_G =  LEDActivatingLogic;
 21a:	c0 93 62 00 	sts	0x0062, r28	; 0x800062 <LED_Activating_Logic_G>
}
 21e:	cf 91       	pop	r28
 220:	08 95       	ret

00000222 <LED_on>:



void LED_on(uint8_t pinNumber,uint8_t portNumber)			// write HIGH on LED pin --> to be used as (LED OFF or LED ON) depend on the connected circuit (Active high or Active low Gates/Transistors (Current driver)) 
{
	if(LED_Activating_Logic_G==ACTIVE_HIGH)
 222:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <LED_Activating_Logic_G>
 226:	91 30       	cpi	r25, 0x01	; 1
 228:	21 f4       	brne	.+8      	; 0x232 <LED_on+0x10>
	{
		DIO_write(pinNumber , portNumber , HIGH);
 22a:	41 e0       	ldi	r20, 0x01	; 1
 22c:	0e 94 11 02 	call	0x422	; 0x422 <DIO_write>
 230:	08 95       	ret
	}
	else if(LED_Activating_Logic_G==ACTIVE_LOW)
 232:	91 11       	cpse	r25, r1
 234:	03 c0       	rjmp	.+6      	; 0x23c <LED_on+0x1a>
	{
		DIO_write(pinNumber , portNumber , LOW);
 236:	40 e0       	ldi	r20, 0x00	; 0
 238:	0e 94 11 02 	call	0x422	; 0x422 <DIO_write>
 23c:	08 95       	ret

0000023e <LED_off>:



void LED_off(uint8_t pinNumber,uint8_t portNumber)			// write LOW on LED pin --> to be used as (LED OFF or LED ON) depend on the connected circuit (Active high or Active low Gates/Transistors (Current driver))
{
	if(LED_Activating_Logic_G== ACTIVE_HIGH)
 23e:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <LED_Activating_Logic_G>
 242:	91 30       	cpi	r25, 0x01	; 1
 244:	21 f4       	brne	.+8      	; 0x24e <LED_off+0x10>
	{
		DIO_write(pinNumber , portNumber , LOW);
 246:	40 e0       	ldi	r20, 0x00	; 0
 248:	0e 94 11 02 	call	0x422	; 0x422 <DIO_write>
 24c:	08 95       	ret
	}
	else if(LED_Activating_Logic_G== ACTIVE_LOW)
 24e:	91 11       	cpse	r25, r1
 250:	03 c0       	rjmp	.+6      	; 0x258 <LED_off+0x1a>
	{
		DIO_write(pinNumber , portNumber , HIGH);
 252:	41 e0       	ldi	r20, 0x01	; 1
 254:	0e 94 11 02 	call	0x422	; 0x422 <DIO_write>
 258:	08 95       	ret

0000025a <main>:



int  main(void)
{
	Application_init();    //  to initiate the Used Peripherals &  Services --> Includes your code that runs once
 25a:	0e 94 3e 00 	call	0x7c	; 0x7c <Application_init>

	Application_run();		// Includes your application code that Runs forever
 25e:	0e 94 5d 00 	call	0xba	; 0xba <Application_run>
}
 262:	80 e0       	ldi	r24, 0x00	; 0
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	08 95       	ret

00000268 <DIO_init>:
{

	
	

	switch(portNumber)
 268:	62 34       	cpi	r22, 0x42	; 66
 26a:	09 f4       	brne	.+2      	; 0x26e <DIO_init+0x6>
 26c:	3f c0       	rjmp	.+126    	; 0x2ec <DIO_init+0x84>
 26e:	18 f4       	brcc	.+6      	; 0x276 <DIO_init+0xe>
 270:	61 34       	cpi	r22, 0x41	; 65
 272:	41 f0       	breq	.+16     	; 0x284 <DIO_init+0x1c>
 274:	08 95       	ret
 276:	63 34       	cpi	r22, 0x43	; 67
 278:	09 f4       	brne	.+2      	; 0x27c <DIO_init+0x14>
 27a:	6c c0       	rjmp	.+216    	; 0x354 <DIO_init+0xec>
 27c:	64 34       	cpi	r22, 0x44	; 68
 27e:	09 f4       	brne	.+2      	; 0x282 <DIO_init+0x1a>
 280:	9d c0       	rjmp	.+314    	; 0x3bc <DIO_init+0x154>
 282:	08 95       	ret
	{
		case PORT_A : 
			if(direction==OUT)
 284:	41 30       	cpi	r20, 0x01	; 1
 286:	69 f4       	brne	.+26     	; 0x2a2 <DIO_init+0x3a>
			{
				DDRA |= (1<<pinNumber); // make pin direction -> output
 288:	4a b3       	in	r20, 0x1a	; 26
 28a:	21 e0       	ldi	r18, 0x01	; 1
 28c:	30 e0       	ldi	r19, 0x00	; 0
 28e:	b9 01       	movw	r22, r18
 290:	02 c0       	rjmp	.+4      	; 0x296 <DIO_init+0x2e>
 292:	66 0f       	add	r22, r22
 294:	77 1f       	adc	r23, r23
 296:	8a 95       	dec	r24
 298:	e2 f7       	brpl	.-8      	; 0x292 <DIO_init+0x2a>
 29a:	cb 01       	movw	r24, r22
 29c:	84 2b       	or	r24, r20
 29e:	8a bb       	out	0x1a, r24	; 26
 2a0:	08 95       	ret
			}
			else if(direction==IN)
 2a2:	41 11       	cpse	r20, r1
 2a4:	0e c0       	rjmp	.+28     	; 0x2c2 <DIO_init+0x5a>
			{
				DDRA &= ~(1<<pinNumber); // make pin direction -> input
 2a6:	4a b3       	in	r20, 0x1a	; 26
 2a8:	21 e0       	ldi	r18, 0x01	; 1
 2aa:	30 e0       	ldi	r19, 0x00	; 0
 2ac:	b9 01       	movw	r22, r18
 2ae:	02 c0       	rjmp	.+4      	; 0x2b4 <DIO_init+0x4c>
 2b0:	66 0f       	add	r22, r22
 2b2:	77 1f       	adc	r23, r23
 2b4:	8a 95       	dec	r24
 2b6:	e2 f7       	brpl	.-8      	; 0x2b0 <DIO_init+0x48>
 2b8:	cb 01       	movw	r24, r22
 2ba:	80 95       	com	r24
 2bc:	84 23       	and	r24, r20
 2be:	8a bb       	out	0x1a, r24	; 26
 2c0:	08 95       	ret
			}
			else if (direction == INTERNALLY_PULLED_UP_INPUT)
 2c2:	42 30       	cpi	r20, 0x02	; 2
 2c4:	09 f0       	breq	.+2      	; 0x2c8 <DIO_init+0x60>
 2c6:	ac c0       	rjmp	.+344    	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
			{	
				DDRA &= ~(1<<pinNumber); // make pin direction -> input
 2c8:	4a b3       	in	r20, 0x1a	; 26
 2ca:	21 e0       	ldi	r18, 0x01	; 1
 2cc:	30 e0       	ldi	r19, 0x00	; 0
 2ce:	b9 01       	movw	r22, r18
 2d0:	02 c0       	rjmp	.+4      	; 0x2d6 <DIO_init+0x6e>
 2d2:	66 0f       	add	r22, r22
 2d4:	77 1f       	adc	r23, r23
 2d6:	8a 95       	dec	r24
 2d8:	e2 f7       	brpl	.-8      	; 0x2d2 <DIO_init+0x6a>
 2da:	cb 01       	movw	r24, r22
 2dc:	96 2f       	mov	r25, r22
 2de:	90 95       	com	r25
 2e0:	94 23       	and	r25, r20
 2e2:	9a bb       	out	0x1a, r25	; 26
				PORTA |=(1<<pinNumber);		// activate Internal Pull up Resistor (inside MCU , no external Pulling circuitry)
 2e4:	9b b3       	in	r25, 0x1b	; 27
 2e6:	89 2b       	or	r24, r25
 2e8:	8b bb       	out	0x1b, r24	; 27
 2ea:	08 95       	ret
			}
			break;
		
		case PORT_B :
			
			if(direction==OUT)
 2ec:	41 30       	cpi	r20, 0x01	; 1
 2ee:	69 f4       	brne	.+26     	; 0x30a <DIO_init+0xa2>
			{
				DDRB |= (1<<pinNumber); // make pin direction -> output
 2f0:	47 b3       	in	r20, 0x17	; 23
 2f2:	21 e0       	ldi	r18, 0x01	; 1
 2f4:	30 e0       	ldi	r19, 0x00	; 0
 2f6:	b9 01       	movw	r22, r18
 2f8:	02 c0       	rjmp	.+4      	; 0x2fe <DIO_init+0x96>
 2fa:	66 0f       	add	r22, r22
 2fc:	77 1f       	adc	r23, r23
 2fe:	8a 95       	dec	r24
 300:	e2 f7       	brpl	.-8      	; 0x2fa <DIO_init+0x92>
 302:	cb 01       	movw	r24, r22
 304:	84 2b       	or	r24, r20
 306:	87 bb       	out	0x17, r24	; 23
 308:	08 95       	ret
			}
			else if(direction==IN)
 30a:	41 11       	cpse	r20, r1
 30c:	0e c0       	rjmp	.+28     	; 0x32a <DIO_init+0xc2>
			{
				DDRB &= ~(1<<pinNumber); // make pin direction -> input
 30e:	47 b3       	in	r20, 0x17	; 23
 310:	21 e0       	ldi	r18, 0x01	; 1
 312:	30 e0       	ldi	r19, 0x00	; 0
 314:	b9 01       	movw	r22, r18
 316:	02 c0       	rjmp	.+4      	; 0x31c <DIO_init+0xb4>
 318:	66 0f       	add	r22, r22
 31a:	77 1f       	adc	r23, r23
 31c:	8a 95       	dec	r24
 31e:	e2 f7       	brpl	.-8      	; 0x318 <DIO_init+0xb0>
 320:	cb 01       	movw	r24, r22
 322:	80 95       	com	r24
 324:	84 23       	and	r24, r20
 326:	87 bb       	out	0x17, r24	; 23
 328:	08 95       	ret
			}
			else if (direction == INTERNALLY_PULLED_UP_INPUT)
 32a:	42 30       	cpi	r20, 0x02	; 2
 32c:	09 f0       	breq	.+2      	; 0x330 <DIO_init+0xc8>
 32e:	78 c0       	rjmp	.+240    	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
			{	
				DDRB &= ~(1<<pinNumber); // make pin direction -> input
 330:	47 b3       	in	r20, 0x17	; 23
 332:	21 e0       	ldi	r18, 0x01	; 1
 334:	30 e0       	ldi	r19, 0x00	; 0
 336:	b9 01       	movw	r22, r18
 338:	02 c0       	rjmp	.+4      	; 0x33e <DIO_init+0xd6>
 33a:	66 0f       	add	r22, r22
 33c:	77 1f       	adc	r23, r23
 33e:	8a 95       	dec	r24
 340:	e2 f7       	brpl	.-8      	; 0x33a <DIO_init+0xd2>
 342:	cb 01       	movw	r24, r22
 344:	96 2f       	mov	r25, r22
 346:	90 95       	com	r25
 348:	94 23       	and	r25, r20
 34a:	97 bb       	out	0x17, r25	; 23
				PORTB |=(1<<pinNumber);		// activate Internal Pull up Resistor (inside MCU , not external circuitry)
 34c:	98 b3       	in	r25, 0x18	; 24
 34e:	89 2b       	or	r24, r25
 350:	88 bb       	out	0x18, r24	; 24
 352:	08 95       	ret
			}
			break;
			
		case PORT_C :
		
			if(direction==OUT)
 354:	41 30       	cpi	r20, 0x01	; 1
 356:	69 f4       	brne	.+26     	; 0x372 <DIO_init+0x10a>
			{
				DDRC |= (1<<pinNumber); // make pin direction -> output
 358:	44 b3       	in	r20, 0x14	; 20
 35a:	21 e0       	ldi	r18, 0x01	; 1
 35c:	30 e0       	ldi	r19, 0x00	; 0
 35e:	b9 01       	movw	r22, r18
 360:	02 c0       	rjmp	.+4      	; 0x366 <DIO_init+0xfe>
 362:	66 0f       	add	r22, r22
 364:	77 1f       	adc	r23, r23
 366:	8a 95       	dec	r24
 368:	e2 f7       	brpl	.-8      	; 0x362 <DIO_init+0xfa>
 36a:	cb 01       	movw	r24, r22
 36c:	84 2b       	or	r24, r20
 36e:	84 bb       	out	0x14, r24	; 20
 370:	08 95       	ret
			}
			else if(direction==IN)
 372:	41 11       	cpse	r20, r1
 374:	0e c0       	rjmp	.+28     	; 0x392 <DIO_init+0x12a>
			{
				DDRC &= ~(1<<pinNumber); // make pin direction -> input
 376:	44 b3       	in	r20, 0x14	; 20
 378:	21 e0       	ldi	r18, 0x01	; 1
 37a:	30 e0       	ldi	r19, 0x00	; 0
 37c:	b9 01       	movw	r22, r18
 37e:	02 c0       	rjmp	.+4      	; 0x384 <DIO_init+0x11c>
 380:	66 0f       	add	r22, r22
 382:	77 1f       	adc	r23, r23
 384:	8a 95       	dec	r24
 386:	e2 f7       	brpl	.-8      	; 0x380 <DIO_init+0x118>
 388:	cb 01       	movw	r24, r22
 38a:	80 95       	com	r24
 38c:	84 23       	and	r24, r20
 38e:	84 bb       	out	0x14, r24	; 20
 390:	08 95       	ret
			}
			else if (direction == INTERNALLY_PULLED_UP_INPUT)
 392:	42 30       	cpi	r20, 0x02	; 2
 394:	09 f0       	breq	.+2      	; 0x398 <DIO_init+0x130>
 396:	44 c0       	rjmp	.+136    	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
			{	
				DDRC &= ~(1<<pinNumber); // make pin direction -> input
 398:	44 b3       	in	r20, 0x14	; 20
 39a:	21 e0       	ldi	r18, 0x01	; 1
 39c:	30 e0       	ldi	r19, 0x00	; 0
 39e:	b9 01       	movw	r22, r18
 3a0:	02 c0       	rjmp	.+4      	; 0x3a6 <DIO_init+0x13e>
 3a2:	66 0f       	add	r22, r22
 3a4:	77 1f       	adc	r23, r23
 3a6:	8a 95       	dec	r24
 3a8:	e2 f7       	brpl	.-8      	; 0x3a2 <DIO_init+0x13a>
 3aa:	cb 01       	movw	r24, r22
 3ac:	96 2f       	mov	r25, r22
 3ae:	90 95       	com	r25
 3b0:	94 23       	and	r25, r20
 3b2:	94 bb       	out	0x14, r25	; 20
				PORTC |=(1<<pinNumber);		// activate Internal Pull up Resistor (inside MCU , not external circuitry)
 3b4:	95 b3       	in	r25, 0x15	; 21
 3b6:	89 2b       	or	r24, r25
 3b8:	85 bb       	out	0x15, r24	; 21
 3ba:	08 95       	ret
			}
			break;
		
		case PORT_D :
			
			if(direction==OUT)
 3bc:	41 30       	cpi	r20, 0x01	; 1
 3be:	69 f4       	brne	.+26     	; 0x3da <DIO_init+0x172>
			{
				DDRD |= (1<<pinNumber); // make pin direction -> output
 3c0:	41 b3       	in	r20, 0x11	; 17
 3c2:	21 e0       	ldi	r18, 0x01	; 1
 3c4:	30 e0       	ldi	r19, 0x00	; 0
 3c6:	b9 01       	movw	r22, r18
 3c8:	02 c0       	rjmp	.+4      	; 0x3ce <DIO_init+0x166>
 3ca:	66 0f       	add	r22, r22
 3cc:	77 1f       	adc	r23, r23
 3ce:	8a 95       	dec	r24
 3d0:	e2 f7       	brpl	.-8      	; 0x3ca <DIO_init+0x162>
 3d2:	cb 01       	movw	r24, r22
 3d4:	84 2b       	or	r24, r20
 3d6:	81 bb       	out	0x11, r24	; 17
 3d8:	08 95       	ret
			}
			else if(direction==IN)
 3da:	41 11       	cpse	r20, r1
 3dc:	0e c0       	rjmp	.+28     	; 0x3fa <DIO_init+0x192>
			{
				DDRD &= ~(1<<pinNumber); // make pin direction -> input
 3de:	41 b3       	in	r20, 0x11	; 17
 3e0:	21 e0       	ldi	r18, 0x01	; 1
 3e2:	30 e0       	ldi	r19, 0x00	; 0
 3e4:	b9 01       	movw	r22, r18
 3e6:	02 c0       	rjmp	.+4      	; 0x3ec <DIO_init+0x184>
 3e8:	66 0f       	add	r22, r22
 3ea:	77 1f       	adc	r23, r23
 3ec:	8a 95       	dec	r24
 3ee:	e2 f7       	brpl	.-8      	; 0x3e8 <DIO_init+0x180>
 3f0:	cb 01       	movw	r24, r22
 3f2:	80 95       	com	r24
 3f4:	84 23       	and	r24, r20
 3f6:	81 bb       	out	0x11, r24	; 17
 3f8:	08 95       	ret
			}
			else if (direction == INTERNALLY_PULLED_UP_INPUT)
 3fa:	42 30       	cpi	r20, 0x02	; 2
 3fc:	89 f4       	brne	.+34     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
			{	
				DDRD &= ~(1<<pinNumber); // make pin direction -> input
 3fe:	41 b3       	in	r20, 0x11	; 17
 400:	21 e0       	ldi	r18, 0x01	; 1
 402:	30 e0       	ldi	r19, 0x00	; 0
 404:	b9 01       	movw	r22, r18
 406:	02 c0       	rjmp	.+4      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 408:	66 0f       	add	r22, r22
 40a:	77 1f       	adc	r23, r23
 40c:	8a 95       	dec	r24
 40e:	e2 f7       	brpl	.-8      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 410:	cb 01       	movw	r24, r22
 412:	96 2f       	mov	r25, r22
 414:	90 95       	com	r25
 416:	94 23       	and	r25, r20
 418:	91 bb       	out	0x11, r25	; 17
				PORTD |=(1<<pinNumber);		// activate Internal Pull up Resistor (inside MCU , not external circuitry)
 41a:	92 b3       	in	r25, 0x12	; 18
 41c:	89 2b       	or	r24, r25
 41e:	82 bb       	out	0x12, r24	; 18
 420:	08 95       	ret

00000422 <DIO_write>:


void DIO_write(uint8_t pinNumber,uint8_t portNumber,uint8_t value) //write on dio pin
{

	switch(portNumber)
 422:	62 34       	cpi	r22, 0x42	; 66
 424:	51 f1       	breq	.+84     	; 0x47a <DIO_write+0x58>
 426:	18 f4       	brcc	.+6      	; 0x42e <DIO_write+0xc>
 428:	61 34       	cpi	r22, 0x41	; 65
 42a:	41 f0       	breq	.+16     	; 0x43c <DIO_write+0x1a>
 42c:	08 95       	ret
 42e:	63 34       	cpi	r22, 0x43	; 67
 430:	09 f4       	brne	.+2      	; 0x434 <DIO_write+0x12>
 432:	42 c0       	rjmp	.+132    	; 0x4b8 <DIO_write+0x96>
 434:	64 34       	cpi	r22, 0x44	; 68
 436:	09 f4       	brne	.+2      	; 0x43a <DIO_write+0x18>
 438:	5e c0       	rjmp	.+188    	; 0x4f6 <DIO_write+0xd4>
 43a:	08 95       	ret
	{
		case PORT_A :
			if(value==HIGH)
 43c:	41 30       	cpi	r20, 0x01	; 1
 43e:	69 f4       	brne	.+26     	; 0x45a <DIO_write+0x38>
			{
				PORTA |= (1<<pinNumber); // write 1 on this pin
 440:	4b b3       	in	r20, 0x1b	; 27
 442:	21 e0       	ldi	r18, 0x01	; 1
 444:	30 e0       	ldi	r19, 0x00	; 0
 446:	b9 01       	movw	r22, r18
 448:	02 c0       	rjmp	.+4      	; 0x44e <DIO_write+0x2c>
 44a:	66 0f       	add	r22, r22
 44c:	77 1f       	adc	r23, r23
 44e:	8a 95       	dec	r24
 450:	e2 f7       	brpl	.-8      	; 0x44a <DIO_write+0x28>
 452:	cb 01       	movw	r24, r22
 454:	84 2b       	or	r24, r20
 456:	8b bb       	out	0x1b, r24	; 27
 458:	08 95       	ret
			}
			else if(value==LOW)
 45a:	41 11       	cpse	r20, r1
 45c:	6a c0       	rjmp	.+212    	; 0x532 <DIO_write+0x110>
			{
				PORTA &= ~(1<<pinNumber); // write 0 on this pin
 45e:	4b b3       	in	r20, 0x1b	; 27
 460:	21 e0       	ldi	r18, 0x01	; 1
 462:	30 e0       	ldi	r19, 0x00	; 0
 464:	b9 01       	movw	r22, r18
 466:	02 c0       	rjmp	.+4      	; 0x46c <DIO_write+0x4a>
 468:	66 0f       	add	r22, r22
 46a:	77 1f       	adc	r23, r23
 46c:	8a 95       	dec	r24
 46e:	e2 f7       	brpl	.-8      	; 0x468 <DIO_write+0x46>
 470:	cb 01       	movw	r24, r22
 472:	80 95       	com	r24
 474:	84 23       	and	r24, r20
 476:	8b bb       	out	0x1b, r24	; 27
 478:	08 95       	ret
			}
			break;
		
		case PORT_B :
	
			if(value==HIGH)
 47a:	41 30       	cpi	r20, 0x01	; 1
 47c:	69 f4       	brne	.+26     	; 0x498 <DIO_write+0x76>
			{
				PORTB |= (1<<pinNumber); // write 1 on this pin
 47e:	48 b3       	in	r20, 0x18	; 24
 480:	21 e0       	ldi	r18, 0x01	; 1
 482:	30 e0       	ldi	r19, 0x00	; 0
 484:	b9 01       	movw	r22, r18
 486:	02 c0       	rjmp	.+4      	; 0x48c <DIO_write+0x6a>
 488:	66 0f       	add	r22, r22
 48a:	77 1f       	adc	r23, r23
 48c:	8a 95       	dec	r24
 48e:	e2 f7       	brpl	.-8      	; 0x488 <DIO_write+0x66>
 490:	cb 01       	movw	r24, r22
 492:	84 2b       	or	r24, r20
 494:	88 bb       	out	0x18, r24	; 24
 496:	08 95       	ret
			}
			else if(value==LOW)
 498:	41 11       	cpse	r20, r1
 49a:	4b c0       	rjmp	.+150    	; 0x532 <DIO_write+0x110>
			{
				PORTB &= ~(1<<pinNumber); // write 0 on this pin
 49c:	48 b3       	in	r20, 0x18	; 24
 49e:	21 e0       	ldi	r18, 0x01	; 1
 4a0:	30 e0       	ldi	r19, 0x00	; 0
 4a2:	b9 01       	movw	r22, r18
 4a4:	02 c0       	rjmp	.+4      	; 0x4aa <DIO_write+0x88>
 4a6:	66 0f       	add	r22, r22
 4a8:	77 1f       	adc	r23, r23
 4aa:	8a 95       	dec	r24
 4ac:	e2 f7       	brpl	.-8      	; 0x4a6 <DIO_write+0x84>
 4ae:	cb 01       	movw	r24, r22
 4b0:	80 95       	com	r24
 4b2:	84 23       	and	r24, r20
 4b4:	88 bb       	out	0x18, r24	; 24
 4b6:	08 95       	ret
				//Make "DIO_init"function Return Error Value  if exist or return  OK or a Number if Succeeded
			}
			break;
		case PORT_C :
	
			if(value==HIGH)
 4b8:	41 30       	cpi	r20, 0x01	; 1
 4ba:	69 f4       	brne	.+26     	; 0x4d6 <DIO_write+0xb4>
			{
				PORTC |= (1<<pinNumber); // write 1 on this pin
 4bc:	45 b3       	in	r20, 0x15	; 21
 4be:	21 e0       	ldi	r18, 0x01	; 1
 4c0:	30 e0       	ldi	r19, 0x00	; 0
 4c2:	b9 01       	movw	r22, r18
 4c4:	02 c0       	rjmp	.+4      	; 0x4ca <DIO_write+0xa8>
 4c6:	66 0f       	add	r22, r22
 4c8:	77 1f       	adc	r23, r23
 4ca:	8a 95       	dec	r24
 4cc:	e2 f7       	brpl	.-8      	; 0x4c6 <DIO_write+0xa4>
 4ce:	cb 01       	movw	r24, r22
 4d0:	84 2b       	or	r24, r20
 4d2:	85 bb       	out	0x15, r24	; 21
 4d4:	08 95       	ret
			}
			else if(value==LOW)
 4d6:	41 11       	cpse	r20, r1
 4d8:	2c c0       	rjmp	.+88     	; 0x532 <DIO_write+0x110>
			{
				PORTC &= ~(1<<pinNumber); // write 0 on this pin
 4da:	45 b3       	in	r20, 0x15	; 21
 4dc:	21 e0       	ldi	r18, 0x01	; 1
 4de:	30 e0       	ldi	r19, 0x00	; 0
 4e0:	b9 01       	movw	r22, r18
 4e2:	02 c0       	rjmp	.+4      	; 0x4e8 <DIO_write+0xc6>
 4e4:	66 0f       	add	r22, r22
 4e6:	77 1f       	adc	r23, r23
 4e8:	8a 95       	dec	r24
 4ea:	e2 f7       	brpl	.-8      	; 0x4e4 <DIO_write+0xc2>
 4ec:	cb 01       	movw	r24, r22
 4ee:	80 95       	com	r24
 4f0:	84 23       	and	r24, r20
 4f2:	85 bb       	out	0x15, r24	; 21
 4f4:	08 95       	ret
			}
			break;
	
		case PORT_D :
	
			if(value==HIGH)
 4f6:	41 30       	cpi	r20, 0x01	; 1
 4f8:	69 f4       	brne	.+26     	; 0x514 <DIO_write+0xf2>
			{
				PORTD |= (1<<pinNumber); // write 1 on this pin
 4fa:	42 b3       	in	r20, 0x12	; 18
 4fc:	21 e0       	ldi	r18, 0x01	; 1
 4fe:	30 e0       	ldi	r19, 0x00	; 0
 500:	b9 01       	movw	r22, r18
 502:	02 c0       	rjmp	.+4      	; 0x508 <DIO_write+0xe6>
 504:	66 0f       	add	r22, r22
 506:	77 1f       	adc	r23, r23
 508:	8a 95       	dec	r24
 50a:	e2 f7       	brpl	.-8      	; 0x504 <DIO_write+0xe2>
 50c:	cb 01       	movw	r24, r22
 50e:	84 2b       	or	r24, r20
 510:	82 bb       	out	0x12, r24	; 18
 512:	08 95       	ret
			}
			else if(value==LOW)
 514:	41 11       	cpse	r20, r1
 516:	0d c0       	rjmp	.+26     	; 0x532 <DIO_write+0x110>
			{
				PORTD &= ~(1<<pinNumber); // write 0 on this pin
 518:	42 b3       	in	r20, 0x12	; 18
 51a:	21 e0       	ldi	r18, 0x01	; 1
 51c:	30 e0       	ldi	r19, 0x00	; 0
 51e:	b9 01       	movw	r22, r18
 520:	02 c0       	rjmp	.+4      	; 0x526 <DIO_write+0x104>
 522:	66 0f       	add	r22, r22
 524:	77 1f       	adc	r23, r23
 526:	8a 95       	dec	r24
 528:	e2 f7       	brpl	.-8      	; 0x522 <DIO_write+0x100>
 52a:	cb 01       	movw	r24, r22
 52c:	80 95       	com	r24
 52e:	84 23       	and	r24, r20
 530:	82 bb       	out	0x12, r24	; 18
 532:	08 95       	ret

00000534 <DIO_read>:


void DIO_read(uint8_t pinNumber,uint8_t portNumber,uint8_t *value) // read dio pin (get pin status)
{
	
	switch(portNumber)
 534:	62 34       	cpi	r22, 0x42	; 66
 536:	f9 f0       	breq	.+62     	; 0x576 <DIO_read+0x42>
 538:	18 f4       	brcc	.+6      	; 0x540 <DIO_read+0xc>
 53a:	61 34       	cpi	r22, 0x41	; 65
 53c:	39 f0       	breq	.+14     	; 0x54c <DIO_read+0x18>
 53e:	08 95       	ret
 540:	63 34       	cpi	r22, 0x43	; 67
 542:	71 f1       	breq	.+92     	; 0x5a0 <DIO_read+0x6c>
 544:	64 34       	cpi	r22, 0x44	; 68
 546:	09 f4       	brne	.+2      	; 0x54a <DIO_read+0x16>
 548:	40 c0       	rjmp	.+128    	; 0x5ca <DIO_read+0x96>
 54a:	08 95       	ret
	{
		case PORT_A :
		
			*value =((PINA&(1<<pinNumber))>>pinNumber); // read this pin (get state)
 54c:	69 b3       	in	r22, 0x19	; 25
 54e:	21 e0       	ldi	r18, 0x01	; 1
 550:	30 e0       	ldi	r19, 0x00	; 0
 552:	08 2e       	mov	r0, r24
 554:	02 c0       	rjmp	.+4      	; 0x55a <DIO_read+0x26>
 556:	22 0f       	add	r18, r18
 558:	33 1f       	adc	r19, r19
 55a:	0a 94       	dec	r0
 55c:	e2 f7       	brpl	.-8      	; 0x556 <DIO_read+0x22>
 55e:	70 e0       	ldi	r23, 0x00	; 0
 560:	26 23       	and	r18, r22
 562:	37 23       	and	r19, r23
 564:	b9 01       	movw	r22, r18
 566:	02 c0       	rjmp	.+4      	; 0x56c <DIO_read+0x38>
 568:	75 95       	asr	r23
 56a:	67 95       	ror	r22
 56c:	8a 95       	dec	r24
 56e:	e2 f7       	brpl	.-8      	; 0x568 <DIO_read+0x34>
 570:	fa 01       	movw	r30, r20
 572:	60 83       	st	Z, r22
			break;
 574:	08 95       	ret
		
		case PORT_B :
			
			*value =((PINB&(1<<pinNumber))>>pinNumber); // read this pin (get state)
 576:	66 b3       	in	r22, 0x16	; 22
 578:	21 e0       	ldi	r18, 0x01	; 1
 57a:	30 e0       	ldi	r19, 0x00	; 0
 57c:	08 2e       	mov	r0, r24
 57e:	02 c0       	rjmp	.+4      	; 0x584 <DIO_read+0x50>
 580:	22 0f       	add	r18, r18
 582:	33 1f       	adc	r19, r19
 584:	0a 94       	dec	r0
 586:	e2 f7       	brpl	.-8      	; 0x580 <DIO_read+0x4c>
 588:	70 e0       	ldi	r23, 0x00	; 0
 58a:	26 23       	and	r18, r22
 58c:	37 23       	and	r19, r23
 58e:	b9 01       	movw	r22, r18
 590:	02 c0       	rjmp	.+4      	; 0x596 <DIO_read+0x62>
 592:	75 95       	asr	r23
 594:	67 95       	ror	r22
 596:	8a 95       	dec	r24
 598:	e2 f7       	brpl	.-8      	; 0x592 <DIO_read+0x5e>
 59a:	fa 01       	movw	r30, r20
 59c:	60 83       	st	Z, r22
			break;
 59e:	08 95       	ret
			
		case PORT_C :
		
			*value =((PINC&(1<<pinNumber))>>pinNumber); // read this pin (get state)
 5a0:	63 b3       	in	r22, 0x13	; 19
 5a2:	21 e0       	ldi	r18, 0x01	; 1
 5a4:	30 e0       	ldi	r19, 0x00	; 0
 5a6:	08 2e       	mov	r0, r24
 5a8:	02 c0       	rjmp	.+4      	; 0x5ae <DIO_read+0x7a>
 5aa:	22 0f       	add	r18, r18
 5ac:	33 1f       	adc	r19, r19
 5ae:	0a 94       	dec	r0
 5b0:	e2 f7       	brpl	.-8      	; 0x5aa <DIO_read+0x76>
 5b2:	70 e0       	ldi	r23, 0x00	; 0
 5b4:	26 23       	and	r18, r22
 5b6:	37 23       	and	r19, r23
 5b8:	b9 01       	movw	r22, r18
 5ba:	02 c0       	rjmp	.+4      	; 0x5c0 <DIO_read+0x8c>
 5bc:	75 95       	asr	r23
 5be:	67 95       	ror	r22
 5c0:	8a 95       	dec	r24
 5c2:	e2 f7       	brpl	.-8      	; 0x5bc <DIO_read+0x88>
 5c4:	fa 01       	movw	r30, r20
 5c6:	60 83       	st	Z, r22
			break;
 5c8:	08 95       	ret
		
		case PORT_D :
		
			*value =((PIND&(1<<pinNumber))>>pinNumber); // read this pin (get state)
 5ca:	60 b3       	in	r22, 0x10	; 16
 5cc:	21 e0       	ldi	r18, 0x01	; 1
 5ce:	30 e0       	ldi	r19, 0x00	; 0
 5d0:	08 2e       	mov	r0, r24
 5d2:	02 c0       	rjmp	.+4      	; 0x5d8 <DIO_read+0xa4>
 5d4:	22 0f       	add	r18, r18
 5d6:	33 1f       	adc	r19, r19
 5d8:	0a 94       	dec	r0
 5da:	e2 f7       	brpl	.-8      	; 0x5d4 <DIO_read+0xa0>
 5dc:	70 e0       	ldi	r23, 0x00	; 0
 5de:	26 23       	and	r18, r22
 5e0:	37 23       	and	r19, r23
 5e2:	b9 01       	movw	r22, r18
 5e4:	02 c0       	rjmp	.+4      	; 0x5ea <DIO_read+0xb6>
 5e6:	75 95       	asr	r23
 5e8:	67 95       	ror	r22
 5ea:	8a 95       	dec	r24
 5ec:	e2 f7       	brpl	.-8      	; 0x5e6 <DIO_read+0xb2>
 5ee:	fa 01       	movw	r30, r20
 5f0:	60 83       	st	Z, r22
 5f2:	08 95       	ret

000005f4 <DIO_toggle>:
//TODO
void DIO_toggle(uint8_t pinNumber,uint8_t portNumber) // toggle output of dio pin
{
	
	
		switch(portNumber)
 5f4:	62 34       	cpi	r22, 0x42	; 66
 5f6:	b1 f0       	breq	.+44     	; 0x624 <DIO_toggle+0x30>
 5f8:	18 f4       	brcc	.+6      	; 0x600 <DIO_toggle+0xc>
 5fa:	61 34       	cpi	r22, 0x41	; 65
 5fc:	31 f0       	breq	.+12     	; 0x60a <DIO_toggle+0x16>
 5fe:	08 95       	ret
 600:	63 34       	cpi	r22, 0x43	; 67
 602:	e9 f0       	breq	.+58     	; 0x63e <DIO_toggle+0x4a>
 604:	64 34       	cpi	r22, 0x44	; 68
 606:	41 f1       	breq	.+80     	; 0x658 <DIO_toggle+0x64>
 608:	08 95       	ret
		{
			case PORT_A :
			
				PORTA ^=(1<<pinNumber); // Toggle Bit    ( ^ XOR ) (1 XOR 1 = 0) (0 XOR 1 = 1)
 60a:	4b b3       	in	r20, 0x1b	; 27
 60c:	21 e0       	ldi	r18, 0x01	; 1
 60e:	30 e0       	ldi	r19, 0x00	; 0
 610:	b9 01       	movw	r22, r18
 612:	02 c0       	rjmp	.+4      	; 0x618 <DIO_toggle+0x24>
 614:	66 0f       	add	r22, r22
 616:	77 1f       	adc	r23, r23
 618:	8a 95       	dec	r24
 61a:	e2 f7       	brpl	.-8      	; 0x614 <DIO_toggle+0x20>
 61c:	cb 01       	movw	r24, r22
 61e:	84 27       	eor	r24, r20
 620:	8b bb       	out	0x1b, r24	; 27
				break;
 622:	08 95       	ret
			
			case PORT_B :
			
				PORTB ^=(1<<pinNumber); // Toggle Bit    ( ^ XOR ) (1 XOR 1 = 0) (0 XOR 1 = 1)	
 624:	48 b3       	in	r20, 0x18	; 24
 626:	21 e0       	ldi	r18, 0x01	; 1
 628:	30 e0       	ldi	r19, 0x00	; 0
 62a:	b9 01       	movw	r22, r18
 62c:	02 c0       	rjmp	.+4      	; 0x632 <DIO_toggle+0x3e>
 62e:	66 0f       	add	r22, r22
 630:	77 1f       	adc	r23, r23
 632:	8a 95       	dec	r24
 634:	e2 f7       	brpl	.-8      	; 0x62e <DIO_toggle+0x3a>
 636:	cb 01       	movw	r24, r22
 638:	84 27       	eor	r24, r20
 63a:	88 bb       	out	0x18, r24	; 24
				break;
 63c:	08 95       	ret
			
			case PORT_C :
			
				PORTC ^=(1<<pinNumber); // Toggle Bit    ( ^ XOR ) (1 XOR 1 = 0) (0 XOR 1 = 1)	
 63e:	45 b3       	in	r20, 0x15	; 21
 640:	21 e0       	ldi	r18, 0x01	; 1
 642:	30 e0       	ldi	r19, 0x00	; 0
 644:	b9 01       	movw	r22, r18
 646:	02 c0       	rjmp	.+4      	; 0x64c <DIO_toggle+0x58>
 648:	66 0f       	add	r22, r22
 64a:	77 1f       	adc	r23, r23
 64c:	8a 95       	dec	r24
 64e:	e2 f7       	brpl	.-8      	; 0x648 <DIO_toggle+0x54>
 650:	cb 01       	movw	r24, r22
 652:	84 27       	eor	r24, r20
 654:	85 bb       	out	0x15, r24	; 21
				break;
 656:	08 95       	ret
			
			case PORT_D :
			
				PORTD ^=(1<<pinNumber); // Toggle Bit    ( ^ XOR ) (1 XOR 1 = 0) (0 XOR 1 = 1)	
 658:	42 b3       	in	r20, 0x12	; 18
 65a:	21 e0       	ldi	r18, 0x01	; 1
 65c:	30 e0       	ldi	r19, 0x00	; 0
 65e:	b9 01       	movw	r22, r18
 660:	02 c0       	rjmp	.+4      	; 0x666 <DIO_toggle+0x72>
 662:	66 0f       	add	r22, r22
 664:	77 1f       	adc	r23, r23
 666:	8a 95       	dec	r24
 668:	e2 f7       	brpl	.-8      	; 0x662 <DIO_toggle+0x6e>
 66a:	cb 01       	movw	r24, r22
 66c:	84 27       	eor	r24, r20
 66e:	82 bb       	out	0x12, r24	; 18
 670:	08 95       	ret

00000672 <_exit>:
 672:	f8 94       	cli

00000674 <__stop_program>:
 674:	ff cf       	rjmp	.-2      	; 0x674 <__stop_program>
