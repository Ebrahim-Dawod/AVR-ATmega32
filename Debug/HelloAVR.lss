
HelloAVR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000580  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000005f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800060  00800060  000005f4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005f4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000624  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e0  00000000  00000000  00000660  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000bb7  00000000  00000000  00000740  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007da  00000000  00000000  000012f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006fc  00000000  00000000  00001ad1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000168  00000000  00000000  000021d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000042e  00000000  00000000  00002338  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ad9  00000000  00000000  00002766  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  0000323f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a3 36       	cpi	r26, 0x63	; 99
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <main>
  74:	0c 94 be 02 	jmp	0x57c	; 0x57c <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <Application_init>:




void Application_init()			 //  to initiate the Used Peripherals &  Services --> Includes your code that runs once
{
  7c:	cf 93       	push	r28
	
	

	for(uint8_t pinNumber=0; pinNumber<8;pinNumber++)
  7e:	c0 e0       	ldi	r28, 0x00	; 0
	{
		LED_init(pinNumber,PORT_D, ACTIVE_HIGH);
  80:	41 e0       	ldi	r20, 0x01	; 1
  82:	64 e4       	ldi	r22, 0x44	; 68
  84:	8c 2f       	mov	r24, r28
  86:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LED_init>
void Application_init()			 //  to initiate the Used Peripherals &  Services --> Includes your code that runs once
{
	
	

	for(uint8_t pinNumber=0; pinNumber<8;pinNumber++)
  8a:	cf 5f       	subi	r28, 0xFF	; 255
  8c:	c8 30       	cpi	r28, 0x08	; 8
  8e:	c1 f7       	brne	.-16     	; 0x80 <Application_init+0x4>
		LED_init(pinNumber,PORT_D, ACTIVE_HIGH);
	}
	
	
	
	LED_init(1,PORT_B, ACTIVE_HIGH);
  90:	41 e0       	ldi	r20, 0x01	; 1
  92:	62 e4       	ldi	r22, 0x42	; 66
  94:	81 e0       	ldi	r24, 0x01	; 1
  96:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LED_init>
	
	LED_init(5,PORT_B, ACTIVE_HIGH);
  9a:	41 e0       	ldi	r20, 0x01	; 1
  9c:	62 e4       	ldi	r22, 0x42	; 66
  9e:	85 e0       	ldi	r24, 0x05	; 5
  a0:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LED_init>

	for(uint8_t pinNumber=0;pinNumber<8;pinNumber++)
  a4:	c0 e0       	ldi	r28, 0x00	; 0
	{
		Button_init(pinNumber,PORT_A,INTERNAL_PULL_UP_INPUT);
  a6:	42 e0       	ldi	r20, 0x02	; 2
  a8:	61 e4       	ldi	r22, 0x41	; 65
  aa:	8c 2f       	mov	r24, r28
  ac:	0e 94 75 00 	call	0xea	; 0xea <Button_init>
	
	LED_init(1,PORT_B, ACTIVE_HIGH);
	
	LED_init(5,PORT_B, ACTIVE_HIGH);

	for(uint8_t pinNumber=0;pinNumber<8;pinNumber++)
  b0:	cf 5f       	subi	r28, 0xFF	; 255
  b2:	c8 30       	cpi	r28, 0x08	; 8
  b4:	c1 f7       	brne	.-16     	; 0xa6 <Application_init+0x2a>
	{
		Button_init(pinNumber,PORT_A,INTERNAL_PULL_UP_INPUT);
	}

	
}// End of Application_init()
  b6:	cf 91       	pop	r28
  b8:	08 95       	ret

000000ba <Application_run>:


    /* Replace with your application code */
    while (1) 
    {
		for(uint8_t pinNumber=0; pinNumber<8; pinNumber++)
  ba:	c0 e0       	ldi	r28, 0x00	; 0
		{
			Button_read(pinNumber,PORT_A,&ButtonState); 
  bc:	40 e6       	ldi	r20, 0x60	; 96
  be:	50 e0       	ldi	r21, 0x00	; 0
  c0:	61 e4       	ldi	r22, 0x41	; 65
  c2:	8c 2f       	mov	r24, r28
  c4:	0e 94 84 00 	call	0x108	; 0x108 <Button_read>
			
			if(ButtonState==PRESSED)
  c8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  cc:	81 30       	cpi	r24, 0x01	; 1
  ce:	29 f4       	brne	.+10     	; 0xda <Application_run+0x20>
			{			
				LED_on(pinNumber,PORT_D);
  d0:	64 e4       	ldi	r22, 0x44	; 68
  d2:	8c 2f       	mov	r24, r28
  d4:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <LED_on>
  d8:	04 c0       	rjmp	.+8      	; 0xe2 <Application_run+0x28>
			}
			else  // ButtonState==NOT_PRESSED
			{
				LED_off(pinNumber,PORT_D);
  da:	64 e4       	ldi	r22, 0x44	; 68
  dc:	8c 2f       	mov	r24, r28
  de:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <LED_off>


    /* Replace with your application code */
    while (1) 
    {
		for(uint8_t pinNumber=0; pinNumber<8; pinNumber++)
  e2:	cf 5f       	subi	r28, 0xFF	; 255
  e4:	c8 30       	cpi	r28, 0x08	; 8
  e6:	51 f7       	brne	.-44     	; 0xbc <Application_run+0x2>
  e8:	e8 cf       	rjmp	.-48     	; 0xba <Application_run>

000000ea <Button_init>:

static uint8_t Input_Pin_Mode_G;


void Button_init(uint8_t pinNumber,uint8_t portNumber,uint8_t InputPinMode)  // Direction = INPUT
{
  ea:	cf 93       	push	r28
  ec:	c4 2f       	mov	r28, r20
	
	switch (InputPinMode)
  ee:	42 30       	cpi	r20, 0x02	; 2
  f0:	21 f4       	brne	.+8      	; 0xfa <Button_init+0x10>
	 {
	 
		case INTERNAL_PULL_UP_INPUT:
		
			DIO_init(pinNumber,portNumber,INTERNAL_PULL_UP_INPUT);
  f2:	42 e0       	ldi	r20, 0x02	; 2
  f4:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <DIO_init>
			break;
  f8:	03 c0       	rjmp	.+6      	; 0x100 <Button_init+0x16>
			  	 
		default: // cases included : EXTERNAL_PULL_UP_INPUT , EXTERNAL_PULL_DOWN_INPUT , NO_PULL_BUTTON_TO_GROUND_INPUT , NO_PULL_BUTTON_TO_VCC_INPUT
			
			DIO_init(pinNumber,portNumber,IN); 
  fa:	40 e0       	ldi	r20, 0x00	; 0
  fc:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <DIO_init>
			break;
			
	 }	//End of switch
			
Input_Pin_Mode_G = InputPinMode; // transmit Value of InputPinMode to outside of this function	
 100:	c0 93 61 00 	sts	0x0061, r28	; 0x800061 <Input_Pin_Mode_G>
					
}// End of Function  Button_init()
 104:	cf 91       	pop	r28
 106:	08 95       	ret

00000108 <Button_read>:




void Button_read(uint8_t pinNumber,uint8_t portNumber,uint8_t *ButtonState)		// get Button state (whether Pressed or Not Pressed) (will be gotten using ButtonState pointer value)
{
 108:	0f 93       	push	r16
 10a:	1f 93       	push	r17
 10c:	cf 93       	push	r28
 10e:	df 93       	push	r29
 110:	1f 92       	push	r1
 112:	cd b7       	in	r28, 0x3d	; 61
 114:	de b7       	in	r29, 0x3e	; 62
 116:	8a 01       	movw	r16, r20
	
	 uint8_t input_value;
	 //uint8_t* InputPinMode =&direction ; //Initialize Value of pinMode

	 DIO_read(pinNumber, portNumber, &input_value); // read dio
 118:	ae 01       	movw	r20, r28
 11a:	4f 5f       	subi	r20, 0xFF	; 255
 11c:	5f 4f       	sbci	r21, 0xFF	; 255
 11e:	0e 94 5e 02 	call	0x4bc	; 0x4bc <DIO_read>
	 
	 switch (Input_Pin_Mode_G)
 122:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <Input_Pin_Mode_G>
 126:	84 30       	cpi	r24, 0x04	; 4
 128:	19 f1       	breq	.+70     	; 0x170 <Button_read+0x68>
 12a:	28 f4       	brcc	.+10     	; 0x136 <Button_read+0x2e>
 12c:	82 30       	cpi	r24, 0x02	; 2
 12e:	41 f0       	breq	.+16     	; 0x140 <Button_read+0x38>
 130:	83 30       	cpi	r24, 0x03	; 3
 132:	91 f0       	breq	.+36     	; 0x158 <Button_read+0x50>
 134:	3a c0       	rjmp	.+116    	; 0x1aa <Button_read+0xa2>
 136:	85 30       	cpi	r24, 0x05	; 5
 138:	81 f1       	breq	.+96     	; 0x19a <Button_read+0x92>
 13a:	86 30       	cpi	r24, 0x06	; 6
 13c:	21 f1       	breq	.+72     	; 0x186 <Button_read+0x7e>
 13e:	35 c0       	rjmp	.+106    	; 0x1aa <Button_read+0xa2>
	 //*ButtonState = PRESSED;
	 //*ButtonState = NOT_PRESSED;
	 
		case INTERNAL_PULL_UP_INPUT :
			
			if(input_value==HIGH)
 140:	89 81       	ldd	r24, Y+1	; 0x01
 142:	81 30       	cpi	r24, 0x01	; 1
 144:	19 f4       	brne	.+6      	; 0x14c <Button_read+0x44>
			{
				*ButtonState = NOT_PRESSED;
 146:	f8 01       	movw	r30, r16
 148:	10 82       	st	Z, r1
 14a:	2f c0       	rjmp	.+94     	; 0x1aa <Button_read+0xa2>
			}
			else if (input_value==LOW)
 14c:	81 11       	cpse	r24, r1
 14e:	2d c0       	rjmp	.+90     	; 0x1aa <Button_read+0xa2>
			{
				*ButtonState = PRESSED;
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	f8 01       	movw	r30, r16
 154:	80 83       	st	Z, r24
 156:	29 c0       	rjmp	.+82     	; 0x1aa <Button_read+0xa2>
			}
			break;
		////////////////// 
		case EXTERNAL_PULL_UP_INPUT:
		
			if(input_value==HIGH)
 158:	89 81       	ldd	r24, Y+1	; 0x01
 15a:	81 30       	cpi	r24, 0x01	; 1
 15c:	19 f4       	brne	.+6      	; 0x164 <Button_read+0x5c>
			{
				*ButtonState = NOT_PRESSED;
 15e:	f8 01       	movw	r30, r16
 160:	10 82       	st	Z, r1
 162:	23 c0       	rjmp	.+70     	; 0x1aa <Button_read+0xa2>
			}
			else if (input_value==LOW)
 164:	81 11       	cpse	r24, r1
 166:	21 c0       	rjmp	.+66     	; 0x1aa <Button_read+0xa2>
			{
				*ButtonState = PRESSED;
 168:	81 e0       	ldi	r24, 0x01	; 1
 16a:	f8 01       	movw	r30, r16
 16c:	80 83       	st	Z, r24
 16e:	1d c0       	rjmp	.+58     	; 0x1aa <Button_read+0xa2>
			}
			break;
		///////////////
		case EXTERNAL_PULL_DOWN_INPUT :
		
			if(input_value==HIGH)
 170:	89 81       	ldd	r24, Y+1	; 0x01
 172:	81 30       	cpi	r24, 0x01	; 1
 174:	19 f4       	brne	.+6      	; 0x17c <Button_read+0x74>
			{
				*ButtonState = PRESSED;
 176:	f8 01       	movw	r30, r16
 178:	80 83       	st	Z, r24
 17a:	17 c0       	rjmp	.+46     	; 0x1aa <Button_read+0xa2>
			}
			else if (input_value==LOW)
 17c:	81 11       	cpse	r24, r1
 17e:	15 c0       	rjmp	.+42     	; 0x1aa <Button_read+0xa2>
			{
				*ButtonState = NOT_PRESSED;
 180:	f8 01       	movw	r30, r16
 182:	10 82       	st	Z, r1
 184:	12 c0       	rjmp	.+36     	; 0x1aa <Button_read+0xa2>
			}
			break;
		/////////////////
		case NO_PULL_BUTTON_TO_GROUND_INPUT :	//this Button connection is Not Recommended Because it will Leave the Pin in a floating state (Not Logic HIGH Nor LOW) it will expose the pin to Noise (Noise will send a False PRESSED Status)
			
			if(input_value==LOW)
 186:	89 81       	ldd	r24, Y+1	; 0x01
 188:	81 11       	cpse	r24, r1
 18a:	04 c0       	rjmp	.+8      	; 0x194 <Button_read+0x8c>
			{
				*ButtonState = PRESSED;
 18c:	81 e0       	ldi	r24, 0x01	; 1
 18e:	f8 01       	movw	r30, r16
 190:	80 83       	st	Z, r24
 192:	0b c0       	rjmp	.+22     	; 0x1aa <Button_read+0xa2>
			}
			
			else
			{
				*ButtonState = NOT_PRESSED;
 194:	f8 01       	movw	r30, r16
 196:	10 82       	st	Z, r1
 198:	08 c0       	rjmp	.+16     	; 0x1aa <Button_read+0xa2>
			break;
		//////////////////////
		case NO_PULL_BUTTON_TO_VCC_INPUT : //this Button connection is Not Recommended Because it will Leave the Pin in a floating state (Not Logic HIGH Nor LOW) it will expose the pin to Noise (Noise will send a False PRESSED Status)

			
			if(input_value==HIGH)
 19a:	89 81       	ldd	r24, Y+1	; 0x01
 19c:	81 30       	cpi	r24, 0x01	; 1
 19e:	19 f4       	brne	.+6      	; 0x1a6 <Button_read+0x9e>
			{
				*ButtonState = PRESSED;
 1a0:	f8 01       	movw	r30, r16
 1a2:	80 83       	st	Z, r24
 1a4:	02 c0       	rjmp	.+4      	; 0x1aa <Button_read+0xa2>
			}
			
			else
			{
				*ButtonState = NOT_PRESSED;
 1a6:	f8 01       	movw	r30, r16
 1a8:	10 82       	st	Z, r1
			}
			break;
			
	 }//End of switch
	 
}// End of Function  Button_read()
 1aa:	0f 90       	pop	r0
 1ac:	df 91       	pop	r29
 1ae:	cf 91       	pop	r28
 1b0:	1f 91       	pop	r17
 1b2:	0f 91       	pop	r16
 1b4:	08 95       	ret

000001b6 <LED_init>:

static uint8_t LED_Activating_Logic_G;
//Scope of this Global variable is seen inside and out side of all of functions -- but only for this file Because of "static"  

void LED_init(uint8_t pinNumber,uint8_t portNumber, uint8_t LEDActivatingLogic)			// initiate LED (initiate MCU pin which connected to LED to Be OUTPUT )
{	
 1b6:	cf 93       	push	r28
 1b8:	c4 2f       	mov	r28, r20
	DIO_init( pinNumber, portNumber, OUT);
 1ba:	41 e0       	ldi	r20, 0x01	; 1
 1bc:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <DIO_init>
	LED_Activating_Logic_G =  LEDActivatingLogic;
 1c0:	c0 93 62 00 	sts	0x0062, r28	; 0x800062 <LED_Activating_Logic_G>
}
 1c4:	cf 91       	pop	r28
 1c6:	08 95       	ret

000001c8 <LED_on>:


void LED_on(uint8_t pinNumber,uint8_t portNumber)	// write HIGH/LOW on LED pin --> to be used as (LED OFF or LED ON) depend on the connected circuit (Active high or Active low Gates/Transistors (Current driver)) 
{
	
	DIO_write(pinNumber , portNumber , LED_Activating_Logic_G); // LED_Activating_Logic_G : ACTIVE_HIGH=1=HIGH / ACTIVE_LOW=0=LOW
 1c8:	40 91 62 00 	lds	r20, 0x0062	; 0x800062 <LED_Activating_Logic_G>
 1cc:	0e 94 d5 01 	call	0x3aa	; 0x3aa <DIO_write>
 1d0:	08 95       	ret

000001d2 <LED_off>:


void LED_off(uint8_t pinNumber,uint8_t portNumber)			//to turn LED OFF we should write LOW/HIGH on LED pin -->  depend on the connected circuit (Active high or Active low Gates/Transistors (Current driver))
{
	
	DIO_write(pinNumber , portNumber , !LED_Activating_Logic_G);  // LED_Activating_Logic_G : ACTIVE_HIGH=1=HIGH / ACTIVE_LOW=0=LOW
 1d2:	41 e0       	ldi	r20, 0x01	; 1
 1d4:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <LED_Activating_Logic_G>
 1d8:	91 11       	cpse	r25, r1
 1da:	40 e0       	ldi	r20, 0x00	; 0
 1dc:	0e 94 d5 01 	call	0x3aa	; 0x3aa <DIO_write>
 1e0:	08 95       	ret

000001e2 <main>:



int  main(void)
{
	Application_init();    //  to initiate the Used Peripherals &  Services --> Includes your code that runs once
 1e2:	0e 94 3e 00 	call	0x7c	; 0x7c <Application_init>

	Application_run();		// Includes your application code that Runs forever
 1e6:	0e 94 5d 00 	call	0xba	; 0xba <Application_run>
}
 1ea:	80 e0       	ldi	r24, 0x00	; 0
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	08 95       	ret

000001f0 <DIO_init>:
		////Make "DIO_init"function Return Error Value  if exist or return  OK or a Number if Succeeded
	//}
	//
	

	switch(portNumber)
 1f0:	62 34       	cpi	r22, 0x42	; 66
 1f2:	09 f4       	brne	.+2      	; 0x1f6 <DIO_init+0x6>
 1f4:	3f c0       	rjmp	.+126    	; 0x274 <DIO_init+0x84>
 1f6:	18 f4       	brcc	.+6      	; 0x1fe <DIO_init+0xe>
 1f8:	61 34       	cpi	r22, 0x41	; 65
 1fa:	41 f0       	breq	.+16     	; 0x20c <DIO_init+0x1c>
 1fc:	08 95       	ret
 1fe:	63 34       	cpi	r22, 0x43	; 67
 200:	09 f4       	brne	.+2      	; 0x204 <DIO_init+0x14>
 202:	6c c0       	rjmp	.+216    	; 0x2dc <DIO_init+0xec>
 204:	64 34       	cpi	r22, 0x44	; 68
 206:	09 f4       	brne	.+2      	; 0x20a <DIO_init+0x1a>
 208:	9d c0       	rjmp	.+314    	; 0x344 <DIO_init+0x154>
 20a:	08 95       	ret
	{
		case PORT_A : 
			if(direction==OUT)
 20c:	41 30       	cpi	r20, 0x01	; 1
 20e:	69 f4       	brne	.+26     	; 0x22a <DIO_init+0x3a>
			{
				//DDRA |= (1<<pinNumber);   // make pin direction -> output
				//set_bit(pinNumber,DDRA);	// make pin direction -> output // write 1 on this pin
				
				SET_BIT(pinNumber,DDRA);	// make pin direction -> output // write 1 on this pin
 210:	4a b3       	in	r20, 0x1a	; 26
 212:	21 e0       	ldi	r18, 0x01	; 1
 214:	30 e0       	ldi	r19, 0x00	; 0
 216:	b9 01       	movw	r22, r18
 218:	02 c0       	rjmp	.+4      	; 0x21e <DIO_init+0x2e>
 21a:	66 0f       	add	r22, r22
 21c:	77 1f       	adc	r23, r23
 21e:	8a 95       	dec	r24
 220:	e2 f7       	brpl	.-8      	; 0x21a <DIO_init+0x2a>
 222:	cb 01       	movw	r24, r22
 224:	84 2b       	or	r24, r20
 226:	8a bb       	out	0x1a, r24	; 26
 228:	08 95       	ret
			}
			else if(direction==IN)
 22a:	41 11       	cpse	r20, r1
 22c:	0e c0       	rjmp	.+28     	; 0x24a <DIO_init+0x5a>
			{
				//DDRA &= ~(1<<pinNumber);  // make pin direction -> input
				//clear_bit(pinNumber,DDRA);		// write 0 on this pin
				
				CLEAR_BIT(pinNumber,DDRA);	// make pin direction -> input // write 0 on this pin
 22e:	4a b3       	in	r20, 0x1a	; 26
 230:	21 e0       	ldi	r18, 0x01	; 1
 232:	30 e0       	ldi	r19, 0x00	; 0
 234:	b9 01       	movw	r22, r18
 236:	02 c0       	rjmp	.+4      	; 0x23c <DIO_init+0x4c>
 238:	66 0f       	add	r22, r22
 23a:	77 1f       	adc	r23, r23
 23c:	8a 95       	dec	r24
 23e:	e2 f7       	brpl	.-8      	; 0x238 <DIO_init+0x48>
 240:	cb 01       	movw	r24, r22
 242:	80 95       	com	r24
 244:	84 23       	and	r24, r20
 246:	8a bb       	out	0x1a, r24	; 26
 248:	08 95       	ret
			}
			else if (direction == INTERNALLY_PULLED_UP_INPUT)
 24a:	42 30       	cpi	r20, 0x02	; 2
 24c:	09 f0       	breq	.+2      	; 0x250 <DIO_init+0x60>
 24e:	ac c0       	rjmp	.+344    	; 0x3a8 <DIO_init+0x1b8>
				//PORTA |=(1<<pinNumber);		// activate Internal Pull up Resistor (inside MCU , no external Pulling circuitry)
				
				//clear_bit(pinNumber,DDRA);		// make pin direction -> input
				//set_bit(pinNumber,PORTA);		// activate Internal Pull up Resistor (inside MCU , no external Pulling circuitry)
				
				CLEAR_BIT(pinNumber,DDRA);	 // make pin direction -> input
 250:	4a b3       	in	r20, 0x1a	; 26
 252:	21 e0       	ldi	r18, 0x01	; 1
 254:	30 e0       	ldi	r19, 0x00	; 0
 256:	b9 01       	movw	r22, r18
 258:	02 c0       	rjmp	.+4      	; 0x25e <DIO_init+0x6e>
 25a:	66 0f       	add	r22, r22
 25c:	77 1f       	adc	r23, r23
 25e:	8a 95       	dec	r24
 260:	e2 f7       	brpl	.-8      	; 0x25a <DIO_init+0x6a>
 262:	cb 01       	movw	r24, r22
 264:	96 2f       	mov	r25, r22
 266:	90 95       	com	r25
 268:	94 23       	and	r25, r20
 26a:	9a bb       	out	0x1a, r25	; 26
				SET_BIT(pinNumber,PORTA);	// activate Internal Pull up Resistor (inside MCU , no external Pulling circuitry)
 26c:	9b b3       	in	r25, 0x1b	; 27
 26e:	89 2b       	or	r24, r25
 270:	8b bb       	out	0x1b, r24	; 27
 272:	08 95       	ret
			}
			break;
		
		case PORT_B :
			
			if(direction==OUT)
 274:	41 30       	cpi	r20, 0x01	; 1
 276:	69 f4       	brne	.+26     	; 0x292 <DIO_init+0xa2>
			{
				//DDRB |= (1<<pinNumber); // make pin direction -> output
				//set_bit(pinNumber,DDRB);	// make pin direction -> output	// write 1 on this pin
				
				SET_BIT(pinNumber,DDRB);	// make pin direction -> output	// write 1 on this pin
 278:	47 b3       	in	r20, 0x17	; 23
 27a:	21 e0       	ldi	r18, 0x01	; 1
 27c:	30 e0       	ldi	r19, 0x00	; 0
 27e:	b9 01       	movw	r22, r18
 280:	02 c0       	rjmp	.+4      	; 0x286 <DIO_init+0x96>
 282:	66 0f       	add	r22, r22
 284:	77 1f       	adc	r23, r23
 286:	8a 95       	dec	r24
 288:	e2 f7       	brpl	.-8      	; 0x282 <DIO_init+0x92>
 28a:	cb 01       	movw	r24, r22
 28c:	84 2b       	or	r24, r20
 28e:	87 bb       	out	0x17, r24	; 23
 290:	08 95       	ret
			}
			else if(direction==IN)
 292:	41 11       	cpse	r20, r1
 294:	0e c0       	rjmp	.+28     	; 0x2b2 <DIO_init+0xc2>
			{
				//DDRB &= ~(1<<pinNumber); // make pin direction -> input
				//clear_bit(pinNumber,DDRB);	// make pin direction -> input
				
				CLEAR_BIT(pinNumber,DDRB);	// make pin direction -> input
 296:	47 b3       	in	r20, 0x17	; 23
 298:	21 e0       	ldi	r18, 0x01	; 1
 29a:	30 e0       	ldi	r19, 0x00	; 0
 29c:	b9 01       	movw	r22, r18
 29e:	02 c0       	rjmp	.+4      	; 0x2a4 <DIO_init+0xb4>
 2a0:	66 0f       	add	r22, r22
 2a2:	77 1f       	adc	r23, r23
 2a4:	8a 95       	dec	r24
 2a6:	e2 f7       	brpl	.-8      	; 0x2a0 <DIO_init+0xb0>
 2a8:	cb 01       	movw	r24, r22
 2aa:	80 95       	com	r24
 2ac:	84 23       	and	r24, r20
 2ae:	87 bb       	out	0x17, r24	; 23
 2b0:	08 95       	ret
			}
			else if (direction == INTERNALLY_PULLED_UP_INPUT)
 2b2:	42 30       	cpi	r20, 0x02	; 2
 2b4:	09 f0       	breq	.+2      	; 0x2b8 <DIO_init+0xc8>
 2b6:	78 c0       	rjmp	.+240    	; 0x3a8 <DIO_init+0x1b8>
				//PORTB |=(1<<pinNumber);		// activate Internal Pull up Resistor (inside MCU , not external circuitry)
				
				//clear_bit(pinNumber,DDRB);	// make pin direction -> input
				//set_bit(pinNumber,PORTB);	// activate Internal Pull up Resistor (inside MCU , not external circuitry)
				
				CLEAR_BIT(pinNumber,DDRB);	// make pin direction -> input
 2b8:	47 b3       	in	r20, 0x17	; 23
 2ba:	21 e0       	ldi	r18, 0x01	; 1
 2bc:	30 e0       	ldi	r19, 0x00	; 0
 2be:	b9 01       	movw	r22, r18
 2c0:	02 c0       	rjmp	.+4      	; 0x2c6 <DIO_init+0xd6>
 2c2:	66 0f       	add	r22, r22
 2c4:	77 1f       	adc	r23, r23
 2c6:	8a 95       	dec	r24
 2c8:	e2 f7       	brpl	.-8      	; 0x2c2 <DIO_init+0xd2>
 2ca:	cb 01       	movw	r24, r22
 2cc:	96 2f       	mov	r25, r22
 2ce:	90 95       	com	r25
 2d0:	94 23       	and	r25, r20
 2d2:	97 bb       	out	0x17, r25	; 23
				SET_BIT(pinNumber,PORTB);	// activate Internal Pull up Resistor (inside MCU , not external circuitry)
 2d4:	98 b3       	in	r25, 0x18	; 24
 2d6:	89 2b       	or	r24, r25
 2d8:	88 bb       	out	0x18, r24	; 24
 2da:	08 95       	ret
			}
			break;
			
		case PORT_C :
		
			if(direction==OUT)
 2dc:	41 30       	cpi	r20, 0x01	; 1
 2de:	69 f4       	brne	.+26     	; 0x2fa <DIO_init+0x10a>
			{
				//DDRC |= (1<<pinNumber); // make pin direction -> output
				//set_bit(pinNumber,DDRC);	// make pin direction -> output	// write 1 on this pin
				
				SET_BIT(pinNumber,DDRC);	// make pin direction -> output	// write 1 on this pin
 2e0:	44 b3       	in	r20, 0x14	; 20
 2e2:	21 e0       	ldi	r18, 0x01	; 1
 2e4:	30 e0       	ldi	r19, 0x00	; 0
 2e6:	b9 01       	movw	r22, r18
 2e8:	02 c0       	rjmp	.+4      	; 0x2ee <DIO_init+0xfe>
 2ea:	66 0f       	add	r22, r22
 2ec:	77 1f       	adc	r23, r23
 2ee:	8a 95       	dec	r24
 2f0:	e2 f7       	brpl	.-8      	; 0x2ea <DIO_init+0xfa>
 2f2:	cb 01       	movw	r24, r22
 2f4:	84 2b       	or	r24, r20
 2f6:	84 bb       	out	0x14, r24	; 20
 2f8:	08 95       	ret
			}
			else if(direction==IN)
 2fa:	41 11       	cpse	r20, r1
 2fc:	0e c0       	rjmp	.+28     	; 0x31a <DIO_init+0x12a>
			{
				//DDRC &= ~(1<<pinNumber); // make pin direction -> input
				//clear_bit(pinNumber,DDRC);	// make pin direction -> input
				
				CLEAR_BIT(pinNumber,DDRC);	// make pin direction -> input
 2fe:	44 b3       	in	r20, 0x14	; 20
 300:	21 e0       	ldi	r18, 0x01	; 1
 302:	30 e0       	ldi	r19, 0x00	; 0
 304:	b9 01       	movw	r22, r18
 306:	02 c0       	rjmp	.+4      	; 0x30c <DIO_init+0x11c>
 308:	66 0f       	add	r22, r22
 30a:	77 1f       	adc	r23, r23
 30c:	8a 95       	dec	r24
 30e:	e2 f7       	brpl	.-8      	; 0x308 <DIO_init+0x118>
 310:	cb 01       	movw	r24, r22
 312:	80 95       	com	r24
 314:	84 23       	and	r24, r20
 316:	84 bb       	out	0x14, r24	; 20
 318:	08 95       	ret
				
			}
			else if (direction == INTERNALLY_PULLED_UP_INPUT)
 31a:	42 30       	cpi	r20, 0x02	; 2
 31c:	09 f0       	breq	.+2      	; 0x320 <DIO_init+0x130>
 31e:	44 c0       	rjmp	.+136    	; 0x3a8 <DIO_init+0x1b8>
				//DDRC &= ~(1<<pinNumber); // make pin direction -> input
				//PORTC |=(1<<pinNumber);		// activate Internal Pull up Resistor (inside MCU , not external circuitry)
				//clear_bit(pinNumber,DDRC);	// make pin direction -> input
				//set_bit(pinNumber,PORTC);	// activate Internal Pull up Resistor (inside MCU , not external circuitry)
				
				CLEAR_BIT(pinNumber,DDRC);	// make pin direction -> input
 320:	44 b3       	in	r20, 0x14	; 20
 322:	21 e0       	ldi	r18, 0x01	; 1
 324:	30 e0       	ldi	r19, 0x00	; 0
 326:	b9 01       	movw	r22, r18
 328:	02 c0       	rjmp	.+4      	; 0x32e <DIO_init+0x13e>
 32a:	66 0f       	add	r22, r22
 32c:	77 1f       	adc	r23, r23
 32e:	8a 95       	dec	r24
 330:	e2 f7       	brpl	.-8      	; 0x32a <DIO_init+0x13a>
 332:	cb 01       	movw	r24, r22
 334:	96 2f       	mov	r25, r22
 336:	90 95       	com	r25
 338:	94 23       	and	r25, r20
 33a:	94 bb       	out	0x14, r25	; 20
				SET_BIT(pinNumber,PORTC);	// activate Internal Pull up Resistor (inside MCU , not external circuitry)
 33c:	95 b3       	in	r25, 0x15	; 21
 33e:	89 2b       	or	r24, r25
 340:	85 bb       	out	0x15, r24	; 21
 342:	08 95       	ret
			}
			break;
		
		case PORT_D :
			
			if(direction==OUT)
 344:	41 30       	cpi	r20, 0x01	; 1
 346:	69 f4       	brne	.+26     	; 0x362 <DIO_init+0x172>
			{
				//DDRD |= (1<<pinNumber); // make pin direction -> output
				//set_bit(pinNumber,DDRD);	// make pin direction -> output	// write 1 on this pin
				
				SET_BIT(pinNumber,DDRD);	// make pin direction -> output	// write 1 on this pin
 348:	41 b3       	in	r20, 0x11	; 17
 34a:	21 e0       	ldi	r18, 0x01	; 1
 34c:	30 e0       	ldi	r19, 0x00	; 0
 34e:	b9 01       	movw	r22, r18
 350:	02 c0       	rjmp	.+4      	; 0x356 <DIO_init+0x166>
 352:	66 0f       	add	r22, r22
 354:	77 1f       	adc	r23, r23
 356:	8a 95       	dec	r24
 358:	e2 f7       	brpl	.-8      	; 0x352 <DIO_init+0x162>
 35a:	cb 01       	movw	r24, r22
 35c:	84 2b       	or	r24, r20
 35e:	81 bb       	out	0x11, r24	; 17
 360:	08 95       	ret
			}
			else if(direction==IN)
 362:	41 11       	cpse	r20, r1
 364:	0e c0       	rjmp	.+28     	; 0x382 <DIO_init+0x192>
			{
				//DDRD &= ~(1<<pinNumber); // make pin direction -> input
				//clear_bit(pinNumber,DDRD);	// make pin direction -> input
				
				CLEAR_BIT(pinNumber,DDRD);	// make pin direction -> input
 366:	41 b3       	in	r20, 0x11	; 17
 368:	21 e0       	ldi	r18, 0x01	; 1
 36a:	30 e0       	ldi	r19, 0x00	; 0
 36c:	b9 01       	movw	r22, r18
 36e:	02 c0       	rjmp	.+4      	; 0x374 <DIO_init+0x184>
 370:	66 0f       	add	r22, r22
 372:	77 1f       	adc	r23, r23
 374:	8a 95       	dec	r24
 376:	e2 f7       	brpl	.-8      	; 0x370 <DIO_init+0x180>
 378:	cb 01       	movw	r24, r22
 37a:	80 95       	com	r24
 37c:	84 23       	and	r24, r20
 37e:	81 bb       	out	0x11, r24	; 17
 380:	08 95       	ret
			}
			else if (direction == INTERNALLY_PULLED_UP_INPUT)
 382:	42 30       	cpi	r20, 0x02	; 2
 384:	89 f4       	brne	.+34     	; 0x3a8 <DIO_init+0x1b8>
				//PORTD |=(1<<pinNumber);	// activate Internal Pull up Resistor (inside MCU , not external circuitry)
				
				//clear_bit(pinNumber,DDRD);	// make pin direction -> input
				//set_bit(pinNumber,PORTD);	// activate Internal Pull up Resistor (inside MCU , not external circuitry)
				
				CLEAR_BIT(pinNumber,DDRD);	// make pin direction -> input
 386:	41 b3       	in	r20, 0x11	; 17
 388:	21 e0       	ldi	r18, 0x01	; 1
 38a:	30 e0       	ldi	r19, 0x00	; 0
 38c:	b9 01       	movw	r22, r18
 38e:	02 c0       	rjmp	.+4      	; 0x394 <DIO_init+0x1a4>
 390:	66 0f       	add	r22, r22
 392:	77 1f       	adc	r23, r23
 394:	8a 95       	dec	r24
 396:	e2 f7       	brpl	.-8      	; 0x390 <DIO_init+0x1a0>
 398:	cb 01       	movw	r24, r22
 39a:	96 2f       	mov	r25, r22
 39c:	90 95       	com	r25
 39e:	94 23       	and	r25, r20
 3a0:	91 bb       	out	0x11, r25	; 17
				SET_BIT(pinNumber,PORTD);	// activate Internal Pull up Resistor (inside MCU , not external circuitry)
 3a2:	92 b3       	in	r25, 0x12	; 18
 3a4:	89 2b       	or	r24, r25
 3a6:	82 bb       	out	0x12, r24	; 18
 3a8:	08 95       	ret

000003aa <DIO_write>:
		//// Error Handling
		////Make "DIO_init"function Return Error Value  if exist or return  OK or a Number if Succeeded
	//}	
	//

	switch(portNumber)
 3aa:	62 34       	cpi	r22, 0x42	; 66
 3ac:	51 f1       	breq	.+84     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 3ae:	18 f4       	brcc	.+6      	; 0x3b6 <DIO_write+0xc>
 3b0:	61 34       	cpi	r22, 0x41	; 65
 3b2:	41 f0       	breq	.+16     	; 0x3c4 <DIO_write+0x1a>
 3b4:	08 95       	ret
 3b6:	63 34       	cpi	r22, 0x43	; 67
 3b8:	09 f4       	brne	.+2      	; 0x3bc <DIO_write+0x12>
 3ba:	42 c0       	rjmp	.+132    	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
 3bc:	64 34       	cpi	r22, 0x44	; 68
 3be:	09 f4       	brne	.+2      	; 0x3c2 <DIO_write+0x18>
 3c0:	5e c0       	rjmp	.+188    	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
 3c2:	08 95       	ret
	{
		case PORT_A :
			if(value==HIGH)
 3c4:	41 30       	cpi	r20, 0x01	; 1
 3c6:	69 f4       	brne	.+26     	; 0x3e2 <DIO_write+0x38>
			{
				//PORTA |= (1<<pinNumber);	// write 1 on this pin
				//set_bit(pinNumber,PORTA);	// write 1 on this pin
				SET_BIT(pinNumber,PORTA);	// write 1 on this pin
 3c8:	4b b3       	in	r20, 0x1b	; 27
 3ca:	21 e0       	ldi	r18, 0x01	; 1
 3cc:	30 e0       	ldi	r19, 0x00	; 0
 3ce:	b9 01       	movw	r22, r18
 3d0:	02 c0       	rjmp	.+4      	; 0x3d6 <DIO_write+0x2c>
 3d2:	66 0f       	add	r22, r22
 3d4:	77 1f       	adc	r23, r23
 3d6:	8a 95       	dec	r24
 3d8:	e2 f7       	brpl	.-8      	; 0x3d2 <DIO_write+0x28>
 3da:	cb 01       	movw	r24, r22
 3dc:	84 2b       	or	r24, r20
 3de:	8b bb       	out	0x1b, r24	; 27
 3e0:	08 95       	ret
			}
			else if(value==LOW)
 3e2:	41 11       	cpse	r20, r1
 3e4:	6a c0       	rjmp	.+212    	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
			{
				//PORTA &= ~(1<<pinNumber);		// write 0 on this pin
				//clear_bit(pinNumber,PORTA);	// write 0 on this pin
				CLEAR_BIT(pinNumber,PORTA);		// write 0 on this pin
 3e6:	4b b3       	in	r20, 0x1b	; 27
 3e8:	21 e0       	ldi	r18, 0x01	; 1
 3ea:	30 e0       	ldi	r19, 0x00	; 0
 3ec:	b9 01       	movw	r22, r18
 3ee:	02 c0       	rjmp	.+4      	; 0x3f4 <DIO_write+0x4a>
 3f0:	66 0f       	add	r22, r22
 3f2:	77 1f       	adc	r23, r23
 3f4:	8a 95       	dec	r24
 3f6:	e2 f7       	brpl	.-8      	; 0x3f0 <DIO_write+0x46>
 3f8:	cb 01       	movw	r24, r22
 3fa:	80 95       	com	r24
 3fc:	84 23       	and	r24, r20
 3fe:	8b bb       	out	0x1b, r24	; 27
 400:	08 95       	ret
			}
			break;
		
		case PORT_B :
	
			if(value==HIGH)
 402:	41 30       	cpi	r20, 0x01	; 1
 404:	69 f4       	brne	.+26     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
			{
				//PORTB |= (1<<pinNumber);	// write 1 on this pin
				//set_bit(pinNumber,PORTB);	// write 1 on this pin
				SET_BIT(pinNumber,PORTB);	// write 1 on this pin
 406:	48 b3       	in	r20, 0x18	; 24
 408:	21 e0       	ldi	r18, 0x01	; 1
 40a:	30 e0       	ldi	r19, 0x00	; 0
 40c:	b9 01       	movw	r22, r18
 40e:	02 c0       	rjmp	.+4      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 410:	66 0f       	add	r22, r22
 412:	77 1f       	adc	r23, r23
 414:	8a 95       	dec	r24
 416:	e2 f7       	brpl	.-8      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 418:	cb 01       	movw	r24, r22
 41a:	84 2b       	or	r24, r20
 41c:	88 bb       	out	0x18, r24	; 24
 41e:	08 95       	ret
			}
			else if(value==LOW)
 420:	41 11       	cpse	r20, r1
 422:	4b c0       	rjmp	.+150    	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
			{
				//PORTB &= ~(1<<pinNumber);		// write 0 on this pin
				//clear_bit(pinNumber,PORTB);	// write 0 on this pin
				CLEAR_BIT(pinNumber,PORTB);		// write 0 on this pin
 424:	48 b3       	in	r20, 0x18	; 24
 426:	21 e0       	ldi	r18, 0x01	; 1
 428:	30 e0       	ldi	r19, 0x00	; 0
 42a:	b9 01       	movw	r22, r18
 42c:	02 c0       	rjmp	.+4      	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
 42e:	66 0f       	add	r22, r22
 430:	77 1f       	adc	r23, r23
 432:	8a 95       	dec	r24
 434:	e2 f7       	brpl	.-8      	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 436:	cb 01       	movw	r24, r22
 438:	80 95       	com	r24
 43a:	84 23       	and	r24, r20
 43c:	88 bb       	out	0x18, r24	; 24
 43e:	08 95       	ret
				//Make "DIO_init"function Return Error Value  if exist or return  OK or a Number if Succeeded
			}
			break;
		case PORT_C :
	
			if(value==HIGH)
 440:	41 30       	cpi	r20, 0x01	; 1
 442:	69 f4       	brne	.+26     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
			{
				//PORTC |= (1<<pinNumber);	// write 1 on this pin
				//set_bit(pinNumber,PORTC);	// write 1 on this pin
				SET_BIT(pinNumber,PORTC);	// write 1 on this pin
 444:	45 b3       	in	r20, 0x15	; 21
 446:	21 e0       	ldi	r18, 0x01	; 1
 448:	30 e0       	ldi	r19, 0x00	; 0
 44a:	b9 01       	movw	r22, r18
 44c:	02 c0       	rjmp	.+4      	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
 44e:	66 0f       	add	r22, r22
 450:	77 1f       	adc	r23, r23
 452:	8a 95       	dec	r24
 454:	e2 f7       	brpl	.-8      	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
 456:	cb 01       	movw	r24, r22
 458:	84 2b       	or	r24, r20
 45a:	85 bb       	out	0x15, r24	; 21
 45c:	08 95       	ret
			}
			else if(value==LOW)
 45e:	41 11       	cpse	r20, r1
 460:	2c c0       	rjmp	.+88     	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
			{
				//PORTC &= ~(1<<pinNumber);		// write 0 on this pin
				//clear_bit(pinNumber,PORTC);	// write 0 on this pin
				CLEAR_BIT(pinNumber,PORTC);		// write 0 on this pin
 462:	45 b3       	in	r20, 0x15	; 21
 464:	21 e0       	ldi	r18, 0x01	; 1
 466:	30 e0       	ldi	r19, 0x00	; 0
 468:	b9 01       	movw	r22, r18
 46a:	02 c0       	rjmp	.+4      	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
 46c:	66 0f       	add	r22, r22
 46e:	77 1f       	adc	r23, r23
 470:	8a 95       	dec	r24
 472:	e2 f7       	brpl	.-8      	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
 474:	cb 01       	movw	r24, r22
 476:	80 95       	com	r24
 478:	84 23       	and	r24, r20
 47a:	85 bb       	out	0x15, r24	; 21
 47c:	08 95       	ret
			}
			break;
	
		case PORT_D :
	
			if(value==HIGH)
 47e:	41 30       	cpi	r20, 0x01	; 1
 480:	69 f4       	brne	.+26     	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
			{
				//PORTD |= (1<<pinNumber);	// write 1 on this pin
				//set_bit(pinNumber,PORTD);	// write 1 on this pin
				SET_BIT(pinNumber,PORTD);	// write 1 on this pin
 482:	42 b3       	in	r20, 0x12	; 18
 484:	21 e0       	ldi	r18, 0x01	; 1
 486:	30 e0       	ldi	r19, 0x00	; 0
 488:	b9 01       	movw	r22, r18
 48a:	02 c0       	rjmp	.+4      	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
 48c:	66 0f       	add	r22, r22
 48e:	77 1f       	adc	r23, r23
 490:	8a 95       	dec	r24
 492:	e2 f7       	brpl	.-8      	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
 494:	cb 01       	movw	r24, r22
 496:	84 2b       	or	r24, r20
 498:	82 bb       	out	0x12, r24	; 18
 49a:	08 95       	ret
			}
			else if(value==LOW)
 49c:	41 11       	cpse	r20, r1
 49e:	0d c0       	rjmp	.+26     	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
			{
				//PORTD &= ~(1<<pinNumber);		// write 0 on this pin
				//clear_bit(pinNumber,PORTD);	// write 0 on this pin
				CLEAR_BIT(pinNumber,PORTD);		// write 0 on this pin
 4a0:	42 b3       	in	r20, 0x12	; 18
 4a2:	21 e0       	ldi	r18, 0x01	; 1
 4a4:	30 e0       	ldi	r19, 0x00	; 0
 4a6:	b9 01       	movw	r22, r18
 4a8:	02 c0       	rjmp	.+4      	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>
 4aa:	66 0f       	add	r22, r22
 4ac:	77 1f       	adc	r23, r23
 4ae:	8a 95       	dec	r24
 4b0:	e2 f7       	brpl	.-8      	; 0x4aa <__LOCK_REGION_LENGTH__+0xaa>
 4b2:	cb 01       	movw	r24, r22
 4b4:	80 95       	com	r24
 4b6:	84 23       	and	r24, r20
 4b8:	82 bb       	out	0x12, r24	; 18
 4ba:	08 95       	ret

000004bc <DIO_read>:


void DIO_read(uint8_t pinNumber,uint8_t portNumber,uint8_t *value) // read dio pin (get pin status)
{
	
	switch(portNumber)
 4bc:	62 34       	cpi	r22, 0x42	; 66
 4be:	f9 f0       	breq	.+62     	; 0x4fe <DIO_read+0x42>
 4c0:	18 f4       	brcc	.+6      	; 0x4c8 <DIO_read+0xc>
 4c2:	61 34       	cpi	r22, 0x41	; 65
 4c4:	39 f0       	breq	.+14     	; 0x4d4 <DIO_read+0x18>
 4c6:	08 95       	ret
 4c8:	63 34       	cpi	r22, 0x43	; 67
 4ca:	71 f1       	breq	.+92     	; 0x528 <DIO_read+0x6c>
 4cc:	64 34       	cpi	r22, 0x44	; 68
 4ce:	09 f4       	brne	.+2      	; 0x4d2 <DIO_read+0x16>
 4d0:	40 c0       	rjmp	.+128    	; 0x552 <DIO_read+0x96>
 4d2:	08 95       	ret
	{
		case PORT_A :
		
			//*value =((PINA&(1<<pinNumber))>>pinNumber);	// read this pin (get state)
			//get_bit(pinNumber,PINA,&value);				// read this bit (get bit state)
			GET_BIT(pinNumber,PINA,value);					// read this bit (get bit state)
 4d4:	69 b3       	in	r22, 0x19	; 25
 4d6:	21 e0       	ldi	r18, 0x01	; 1
 4d8:	30 e0       	ldi	r19, 0x00	; 0
 4da:	08 2e       	mov	r0, r24
 4dc:	02 c0       	rjmp	.+4      	; 0x4e2 <DIO_read+0x26>
 4de:	22 0f       	add	r18, r18
 4e0:	33 1f       	adc	r19, r19
 4e2:	0a 94       	dec	r0
 4e4:	e2 f7       	brpl	.-8      	; 0x4de <DIO_read+0x22>
 4e6:	70 e0       	ldi	r23, 0x00	; 0
 4e8:	26 23       	and	r18, r22
 4ea:	37 23       	and	r19, r23
 4ec:	b9 01       	movw	r22, r18
 4ee:	02 c0       	rjmp	.+4      	; 0x4f4 <DIO_read+0x38>
 4f0:	75 95       	asr	r23
 4f2:	67 95       	ror	r22
 4f4:	8a 95       	dec	r24
 4f6:	e2 f7       	brpl	.-8      	; 0x4f0 <DIO_read+0x34>
 4f8:	fa 01       	movw	r30, r20
 4fa:	60 83       	st	Z, r22
			break;
 4fc:	08 95       	ret
		
		case PORT_B :
			
			//*value =((PINB&(1<<pinNumber))>>pinNumber);	// read this pin (get state)
			//get_bit(pinNumber,PINB, &value);				// read this bit (get bit state)
			GET_BIT(pinNumber,PINB,value);					// read this bit (get bit state)
 4fe:	66 b3       	in	r22, 0x16	; 22
 500:	21 e0       	ldi	r18, 0x01	; 1
 502:	30 e0       	ldi	r19, 0x00	; 0
 504:	08 2e       	mov	r0, r24
 506:	02 c0       	rjmp	.+4      	; 0x50c <DIO_read+0x50>
 508:	22 0f       	add	r18, r18
 50a:	33 1f       	adc	r19, r19
 50c:	0a 94       	dec	r0
 50e:	e2 f7       	brpl	.-8      	; 0x508 <DIO_read+0x4c>
 510:	70 e0       	ldi	r23, 0x00	; 0
 512:	26 23       	and	r18, r22
 514:	37 23       	and	r19, r23
 516:	b9 01       	movw	r22, r18
 518:	02 c0       	rjmp	.+4      	; 0x51e <DIO_read+0x62>
 51a:	75 95       	asr	r23
 51c:	67 95       	ror	r22
 51e:	8a 95       	dec	r24
 520:	e2 f7       	brpl	.-8      	; 0x51a <DIO_read+0x5e>
 522:	fa 01       	movw	r30, r20
 524:	60 83       	st	Z, r22
			break;
 526:	08 95       	ret
			
		case PORT_C :
		
			//*value =((PINC&(1<<pinNumber))>>pinNumber);	// read this pin (get state)
			//get_bit(pinNumber,PINC, &value);				// read this bit (get bit state)
			GET_BIT(pinNumber,PINC,value);					// read this bit (get bit state)
 528:	63 b3       	in	r22, 0x13	; 19
 52a:	21 e0       	ldi	r18, 0x01	; 1
 52c:	30 e0       	ldi	r19, 0x00	; 0
 52e:	08 2e       	mov	r0, r24
 530:	02 c0       	rjmp	.+4      	; 0x536 <DIO_read+0x7a>
 532:	22 0f       	add	r18, r18
 534:	33 1f       	adc	r19, r19
 536:	0a 94       	dec	r0
 538:	e2 f7       	brpl	.-8      	; 0x532 <DIO_read+0x76>
 53a:	70 e0       	ldi	r23, 0x00	; 0
 53c:	26 23       	and	r18, r22
 53e:	37 23       	and	r19, r23
 540:	b9 01       	movw	r22, r18
 542:	02 c0       	rjmp	.+4      	; 0x548 <DIO_read+0x8c>
 544:	75 95       	asr	r23
 546:	67 95       	ror	r22
 548:	8a 95       	dec	r24
 54a:	e2 f7       	brpl	.-8      	; 0x544 <DIO_read+0x88>
 54c:	fa 01       	movw	r30, r20
 54e:	60 83       	st	Z, r22
			break;
 550:	08 95       	ret
		
		case PORT_D :
		
			//*value =((PIND&(1<<pinNumber))>>pinNumber);	// read this pin (get state)
			//get_bit(pinNumber,PIND, &value);				// read this bit (get bit state)
			GET_BIT(pinNumber,PIND,value);					// read this bit (get bit state)
 552:	60 b3       	in	r22, 0x10	; 16
 554:	21 e0       	ldi	r18, 0x01	; 1
 556:	30 e0       	ldi	r19, 0x00	; 0
 558:	08 2e       	mov	r0, r24
 55a:	02 c0       	rjmp	.+4      	; 0x560 <DIO_read+0xa4>
 55c:	22 0f       	add	r18, r18
 55e:	33 1f       	adc	r19, r19
 560:	0a 94       	dec	r0
 562:	e2 f7       	brpl	.-8      	; 0x55c <DIO_read+0xa0>
 564:	70 e0       	ldi	r23, 0x00	; 0
 566:	26 23       	and	r18, r22
 568:	37 23       	and	r19, r23
 56a:	b9 01       	movw	r22, r18
 56c:	02 c0       	rjmp	.+4      	; 0x572 <DIO_read+0xb6>
 56e:	75 95       	asr	r23
 570:	67 95       	ror	r22
 572:	8a 95       	dec	r24
 574:	e2 f7       	brpl	.-8      	; 0x56e <DIO_read+0xb2>
 576:	fa 01       	movw	r30, r20
 578:	60 83       	st	Z, r22
 57a:	08 95       	ret

0000057c <_exit>:
 57c:	f8 94       	cli

0000057e <__stop_program>:
 57e:	ff cf       	rjmp	.-2      	; 0x57e <__stop_program>
